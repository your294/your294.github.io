<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>maxium_xor_value_ii</title>
    <link href="/2023/11/14/maxium-xor-value-ii/"/>
    <url>/2023/11/14/maxium-xor-value-ii/</url>
    
    <content type="html"><![CDATA[<h2 id="leetcode-2935-找出强数对的最大异或值-II"><a href="#leetcode-2935-找出强数对的最大异或值-II" class="headerlink" title="leetcode 2935. 找出强数对的最大异或值 II"></a>leetcode 2935. 找出强数对的最大异或值 II</h2><p>leetcode 421 最大异或和，前提<br>给你一个下标从 0 开始的整数数组 nums 。如果一对整数 x 和 y 满足以下条件，则称其为 强数对 ：</p><ul><li><code>|x - y| <= min(x, y)</code><br>你需要从 nums 中选出两个整数，且满足：这两个整数可以形成一个强数对，并且它们的按位异或（XOR）值是在该数组所有强数对中的 最大值 。</li></ul><p>返回数组 nums 所有可能的强数对中的 最大 异或值。</p><p>注意，你可以选择同一个整数两次来形成一个强数对。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumStrongPairXor</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, mask = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 两数之和</span><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; seen;<br>        <span class="hljs-comment">// guess every bit can be 1?</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            mask |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>            <span class="hljs-type">int</span> new_ans = ans | (<span class="hljs-number">1</span> &lt;&lt; i);<br>            <span class="hljs-comment">// 清理干净哈希表</span><br>            seen.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; y : nums) &#123;<br>                <span class="hljs-comment">// clear 当前验证位后面全部0, 为了处理简单</span><br>                <span class="hljs-type">int</span> mask_y = y &amp; mask;<br>                <span class="hljs-comment">// 异或A ^ B = C可以交换结果和数</span><br>                <span class="hljs-type">int</span> tar = new_ans ^ mask_y;<br>                <span class="hljs-keyword">auto</span> it = seen.<span class="hljs-built_in">find</span>(tar);<br>                <span class="hljs-keyword">if</span> (it != seen.<span class="hljs-built_in">end</span>() &amp;&amp; it-&gt;second * <span class="hljs-number">2</span> &gt;= y) &#123;<br>                    ans = new_ans; <span class="hljs-keyword">break</span>;<br>                &#125;<br>                seen[mask_y] = y;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>位运算</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>segment_tree</title>
    <link href="/2023/11/14/segment-tree/"/>
    <url>/2023/11/14/segment-tree/</url>
    
    <content type="html"><![CDATA[<h2 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h2><h3 id="题目leetcode307"><a href="#题目leetcode307" class="headerlink" title="题目leetcode307"></a>题目leetcode307</h3><p><img src="https://leetcode.cn/problems/range-sum-query-mutable/" alt="SEGMENT_TREE"></p><p><strong>求取数组任意范围和，但是中间会修改某个元素的值</strong></p><p><strong>PS:<code>lowbit(x) -> x & -x</code></strong> </p><h4 id="1-动机"><a href="#1-动机" class="headerlink" title="1. 动机"></a>1. 动机</h4><p>由于需要修改前缀和数组从1到i的子数组, 考虑能否分裂上述子数组<br>如[1, 1], [2, 2], [3, 3]</p><h4 id="2-如何拆分"><a href="#2-如何拆分" class="headerlink" title="2. 如何拆分"></a>2. 如何拆分</h4><p>13 &#x3D; 8 + 4 + 1即前缀和数组[1, 13]可以拆分为8, 4, 1这3个关键区间</p><h5 id="拆分方法"><a href="#拆分方法" class="headerlink" title="拆分方法"></a>拆分方法</h5><p>一般地</p><ul><li>如果i是2的幂, 那么[1, i]不用拆分</li><li>如果i不是2的幂，拆出一个最小的2的幂，计做lowbit(i)，得到长度为lowbit(i)的区间为[i - lowbit(i) + 1, i]， 问题转化为剩下的[1, i - lowbit(i)]如何拆分<br>会产生n个区间</li></ul><h5 id="Algorithm1-prefixSum-右端点为index的关键区间和-代表数组区间为-0-index-1-闭区间"><a href="#Algorithm1-prefixSum-右端点为index的关键区间和-代表数组区间为-0-index-1-闭区间" class="headerlink" title="Algorithm1. prefixSum 右端点为index的关键区间和(代表数组区间为[0, index - 1]) 闭区间"></a>Algorithm1. prefixSum 右端点为index的关键区间和(代表数组区间为[0, index - 1]) 闭区间</h5><p>由于关键区间的右端点互不相同，将右端点为i的关键区间的sum存储在tree<code>[</code>i<code>]</code>中<br>按照如下方式计算[1, i]的元素和</p><ol><li>初始化元素和s &#x3D; 0</li><li>循环将tree<code>[</code>i<code>]</code>加入s中, 对应区间[i - lowbit(i) + 1, i]的sum</li><li>将i更新为<code>i - lowbit(i)</code>, 表示接下来拆分[1, i - lowbit(i)]</li><li>直到i &#x3D; 0 为止(i &gt; 0, 因为前缀后不看那个0开始)</li><li>返回s</li></ol><h4 id="更新方法（当数组元素修改时）"><a href="#更新方法（当数组元素修改时）" class="headerlink" title="更新方法（当数组元素修改时）"></a>更新方法（当数组元素修改时）</h4><p>如果下标<code>x</code>发生更新, 那么包含下标x的关键区间都会更新<br>5更新，[5, 5], [5, 6], [1, 8]都会更新<br>注意 5 + lowbit(5) &#x3D; 5 + 1 &#x3D; 6<br>    6 + lowbit(6) &#x3D; 6 + 2 &#x3D; 8<br>如果x是一个被更新的关键区间的右端点，则下一个是 <code>x + lowbit(x)</code></p><h5 id="Algorithm2-update"><a href="#Algorithm2-update" class="headerlink" title="Algorithm2. update"></a>Algorithm2. update</h5><ol><li>当前修改元素索引idx， 以及要修改的值val</li><li>计算d &#x3D; val - nums<code>[</code>idx<code>]</code></li><li>从小到大更新tree数组 从<code>idx + 1</code>开始（前缀和数组要+1）<code>tree[i] += d</code> next: i +&#x3D; lowbit(i)</li><li>直到i &gt; n结束(i &lt;&#x3D; n)</li><li>修改当前元素值</li></ol><h4 id="求任意区间和-left-right"><a href="#求任意区间和-left-right" class="headerlink" title="求任意区间和[left, right]"></a>求任意区间和[left, right]</h4><p><code>prefixSum(right) - prefixSum(left + 1)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumArray</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>    vector&lt;<span class="hljs-type">int</span>&gt; tree;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x &amp; -x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prefixSum</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i)) &#123;<br>            s += tree[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">NumArray</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) : <span class="hljs-built_in">nums</span>(nums.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">tree</span>(nums.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-built_in">update</span>(i, nums[i]);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> d = val - nums[index];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index + <span class="hljs-number">1</span>; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i)) &#123;<br>            tree[i] += d;<br>        &#125;<br>        nums[index] = val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumRange</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">prefixSum</span>(right + <span class="hljs-number">1</span>) - <span class="hljs-built_in">prefixSum</span>(left);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your NumArray object will be instantiated and called as such:</span><br><span class="hljs-comment"> * NumArray* obj = new NumArray(nums);</span><br><span class="hljs-comment"> * obj-&gt;update(index,val);</span><br><span class="hljs-comment"> * int param_2 = obj-&gt;sumRange(left,right);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>segment_tree</tag>
      
      <tag>区间求和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css_box</title>
    <link href="/2023/11/03/css-box/"/>
    <url>/2023/11/03/css-box/</url>
    
    <content type="html"><![CDATA[<h2 id="伪元素和伪类"><a href="#伪元素和伪类" class="headerlink" title="伪元素和伪类"></a>伪元素和伪类</h2><ol><li><p>伪元素<br>会在选中元素位置上创建一个伪元素，其将成为匹配选中元素的元素</p></li><li><p>伪类<br>当前选中元素的状态，根据状态切换CSS</p></li></ol><h2 id="CSS的2种盒模型"><a href="#CSS的2种盒模型" class="headerlink" title="CSS的2种盒模型"></a>CSS的2种盒模型</h2><ol><li>Block box</li></ol><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li>width 和 height 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”<br><strong>example</strong>: <code><code>&lt;div&gt;&lt;/div&gt;</code></code></li></ul><ol><li>inline box</li></ol><ul><li>盒子不会产生换行。</li><li>width 和 height 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 inline 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 inline 状态的盒子推开。<br><strong>example</strong>: <code><code>&lt;span&gt;&lt;/span&gt;</code></code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>box</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts_import_type</title>
    <link href="/2023/11/02/ts-import-type/"/>
    <url>/2023/11/02/ts-import-type/</url>
    
    <content type="html"><![CDATA[<h2 id="ts-import-type-vs-import"><a href="#ts-import-type-vs-import" class="headerlink" title="ts import type vs import"></a>ts import type vs import</h2><p><code>import</code>和<code>import type</code>都可以导入一个类型或一个值, 但是使用<code>import type</code><br>导入的值, 只能在类型的上下文中使用, 不能作为值使用，也无法extends继承。<br><code>import</code>导入的就按照原本的意义使用即可。</p>]]></content>
    
    
    <categories>
      
      <category>ts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-reflection</title>
    <link href="/2023/10/27/Java-reflection/"/>
    <url>/2023/10/27/Java-reflection/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-reflection"><a href="#Java-reflection" class="headerlink" title="Java reflection"></a>Java reflection</h1><p>另一种是“反射”机制，它允许我们在运行时发现和使用类的信息。<br><font color="red"><strong>反射就是把java类中的各种成分映射成一个个的Java对象</strong></font></p><p>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>reflection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuex-vue4-use</title>
    <link href="/2023/10/27/vuex-vue4-use/"/>
    <url>/2023/10/27/vuex-vue4-use/</url>
    
    <content type="html"><![CDATA[<h1 id="vuex-basic-use"><a href="#vuex-basic-use" class="headerlink" title="vuex basic use"></a>vuex basic use</h1><h2 id="基础项目结构"><a href="#基础项目结构" class="headerlink" title="基础项目结构"></a>基础项目结构</h2><p>-src<br>    -store<br>        -modules<br>            user.js<br>            file.js<br>            resourse.js<br>            ….<br>        -index.js</p><h3 id="在index-js中主要是创建store并做默认导出"><a href="#在index-js中主要是创建store并做默认导出" class="headerlink" title="在index.js中主要是创建store并做默认导出"></a>在index.js中主要是创建store并做默认导出</h3><p>其中createStore会创建store实例，管理vuex的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>    <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;&#125;,<br>    <span class="hljs-attr">modules</span>: &#123;<br>        user <br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h3 id="modules-in-store"><a href="#modules-in-store" class="headerlink" title="modules in store"></a>modules in store</h3><p>由actions调用mutations去修改vuex保存的状态, 确保唯一性, 同时actions为store.dispatch提供调用的函数接口<br>一些复杂的逻辑就到service中去完成.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// user.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserService</span>  <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@service/modules/user&#x27;</span><br><br><span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">token</span>: <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-attr">username</span>: <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-attr">profile</span>: <span class="hljs-literal">undefined</span>,<br>        <span class="hljs-attr">intro</span>: <span class="hljs-literal">undefined</span>,<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">setUserName</span>(<span class="hljs-params">state, username</span>) &#123;<br>            state.<span class="hljs-property">username</span> = username<br>            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>, username)<br>        &#125;,<br>        <span class="hljs-title function_">setToken</span>(<span class="hljs-params">state, token</span>) &#123;<br>            state.<span class="hljs-property">token</span> = token<br>            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, token)<br>        &#125;,<br>        <span class="hljs-title function_">clearToken</span>(<span class="hljs-params">state</span>) &#123;<br>            state.<span class="hljs-property">token</span> = <span class="hljs-literal">undefined</span><br>            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-title function_">setProfile</span>(<span class="hljs-params">state, profile</span>) &#123;<br>            state.<span class="hljs-property">profile</span> = profile<br>        &#125;,<br>        <span class="hljs-title function_">setIntro</span>(<span class="hljs-params">state, intro</span>) &#123;<br>            state.<span class="hljs-property">intro</span> = intro<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">appLogin</span>(<span class="hljs-params">context, payload</span>) &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">appLoginRequest</span>(&#123;<br>                <span class="hljs-attr">userName</span>: payload.<span class="hljs-property">username</span>,<br>                <span class="hljs-attr">password</span>: payload.<span class="hljs-property">password</span> <br>            &#125;, <span class="hljs-literal">false</span>)<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setUserName&#x27;</span>, response.<span class="hljs-property">userName</span>)<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setToken&#x27;</span>, response.<span class="hljs-property">token</span>)<br>            <span class="hljs-keyword">return</span> response <br>        &#125;,<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">appLogout</span>(<span class="hljs-params">context, payload</span>) &#123;<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;clearToken&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">appRegister</span>(<span class="hljs-params">context, payload</span>) &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">appRegisterRequest</span>(payload)<br>            <span class="hljs-keyword">return</span> response<br>        &#125;,<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">appGetUserInfo</span>(<span class="hljs-params">context, payload</span>) &#123;<br>            <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title class_">UserService</span>.<span class="hljs-title function_">appGetUserInfoRequest</span>(payload)<br>            context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setUserName&#x27;</span>, response.<span class="hljs-property">userName</span>)<br>            <span class="hljs-comment">// context.commit(&#x27;setProfile&#x27;, response.profile)</span><br>            <span class="hljs-comment">// context.commit(&#x27;setIntro&#x27;, response.intro)</span><br>            <span class="hljs-keyword">return</span> response<br>        &#125;,<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> user<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vuex</tag>
      
      <tag>vue4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lib-store-front</title>
    <link href="/2023/10/26/lib-store-front/"/>
    <url>/2023/10/26/lib-store-front/</url>
    
    <content type="html"><![CDATA[<h1 id="lib-store"><a href="#lib-store" class="headerlink" title="lib-store"></a>lib-store</h1><p>参考别人做的网盘项目</p><h2 id="front"><a href="#front" class="headerlink" title="front"></a>front</h2><p>前端设计考量<br>vue4 + ant-design-vue + axios + vuex<br>-src<br>    -assets (静态资源)<br>    -configs (少量配置index.js)<br>    -layout (基础布局组件)<br>    -router (index.js 处理路由的一些逻辑)<br>    -routes (index.js 处理路由到哪里去)routerMap<br>    -service (前后端交互服务和<strong>http拦截器</strong>)<br>        -modules (这里类似与后端的MVC也将前端的服务单独抽象出来，包括注册登录查验等操作统一进行了接口设计)<br>        -index.js (这里实现了<strong>http拦截器</strong>)<br>    -store (vuex)<br>        -modules (分模块区别了不同模块的vuex状态)<br>        -index.js<br>    -views (这里是具体的vue界面组件)</p><h3 id="important-service-and-store"><a href="#important-service-and-store" class="headerlink" title="important service and store"></a>important service and store</h3><p><strong>service主要是为了向store提供服务原因在于我们变更源数据都要通过store.dispatch来进行此处要提供如何变更的函数以及入参</strong><br><strong>store.dispatch 也会返回promise适用于then的处理</strong></p><h3 id="前端细节项目结构"><a href="#前端细节项目结构" class="headerlink" title="前端细节项目结构"></a>前端细节项目结构</h3><ol><li>store.dispatch(‘funcName’, args…)都在@store文件夹的modules下面</li><li>因为在路由到用户界面时，<strong>需要先对用户的身份进行校验</strong>，在这之前会需要得到用户的一系列具体信息，<br>主要是用户名，因为该project的用户名都是唯一的, 本来在从cookie中获得了用户名之后，还要从后台查询到<br>具体的intro和profile（头像）等信息，这里还没做, 所以这里在<font color='green'><strong>router.js</strong></font>那里有一些对于<strong>vuex</strong>的状态修改</li><li></li></ol><h2 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h2><p>经典mvc的模式<br>dao 用于和数据库交互<br>bean 实体类<br>dto 传递数据<br>service 向controller提供服务接口<br>controller 向前端提供服务<br>ps: <strong>记得处理跨域</strong></p>]]></content>
    
    
    <categories>
      
      <category>project</category>
      
      <category>vue</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lib-store</tag>
      
      <tag>vue</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-router-use</title>
    <link href="/2023/10/26/vue-router-use/"/>
    <url>/2023/10/26/vue-router-use/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-router基本使用"><a href="#vue-router基本使用" class="headerlink" title="vue-router基本使用"></a>vue-router基本使用</h1><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>-src<br>    -assets （静态文件）<br>    -components （公共组件）<br>    -views (主要界面)<br>    -router (配置路由下面一般就一个index&#x2F;router.js文件)<br>    -config (必要配置)</p><h2 id="在config-index-js中配置proxyTable"><a href="#在config-index-js中配置proxyTable" class="headerlink" title="在config&gt;index.js中配置proxyTable"></a>在config&gt;index.js中配置proxyTable</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">proxyTable</span>: &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://127.0.0.1:8080&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>            <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// use /api replace the address in target</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h2><h2 id="在router-index-js中配置beforeEach"><a href="#在router-index-js中配置beforeEach" class="headerlink" title="在router&gt;index.js中配置beforeEach"></a>在router&gt;index.js中配置beforeEach</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> !== <span class="hljs-string">&#x27;/login&#x27;</span> &amp;&amp; !<span class="hljs-variable language_">localStorage</span>.<span class="hljs-property">token</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// this next is in the func params</span><br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><span class="hljs-comment">// in the actual example</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = authorization.<span class="hljs-title function_">getToken</span>()<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>        <span class="hljs-title function_">next</span>()<br>        <span class="hljs-comment">// if (to.path === &#x27;/login&#x27;) &#123;</span><br>        <span class="hljs-comment">//     next(&#123;</span><br>        <span class="hljs-comment">//         path: &#x27;/&#x27;,</span><br>        <span class="hljs-comment">//         replace: true </span><br>        <span class="hljs-comment">//     &#125;)</span><br>        <span class="hljs-comment">// &#125;else &#123;</span><br>        <span class="hljs-comment">//     console.log(&#x27;get user info&#x27;).then(next)</span><br>        <span class="hljs-comment">// &#125;</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (config.<span class="hljs-property">whiteList</span>.<span class="hljs-title function_">includes</span>(to.<span class="hljs-property">path</span>) || to.<span class="hljs-property">meta</span>.<span class="hljs-property">notRequireLogin</span>) &#123;<br>            <span class="hljs-title function_">next</span>()<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>每个钩子方法接收三个参数： </p><ul><li>to: Route: 即将要进入的目标 路由对象 </li><li>from: Route: 当前导航正要离开的路由 </li><li>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。 </li><li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。 * </li><li>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。 * </li><li>next(‘&#x2F;’) 或者 next({ path: ‘&#x2F;’ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</li><li>确保要调用 next 方法，否则钩子就不会被 resolved。</li></ul><p>这种方式只是简单的前端路由控制，并不能真正阻止用户访问需要登录权限的路由。<br>还有一种情况便是：当前token失效了，但是token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。<br><strong>这时候就需要结合 http 拦截器 + 后端接口返回的http 状态码来判断。</strong></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><strong>新建一个http.js来配置axios拦截器, 统一处理所有http请求和响应, 使用axios的拦截器.</strong><br>通过配置 <font color='red'><strong>http request interceptors</strong></font>为http头添加Authorization字段, 其内容为token.<br>通过配置 <font color='red'><strong>http response interceptors</strong></font>,当后端接口返回401 Unanthorization,重新登录</p><h4 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> http = axios.<span class="hljs-title function_">create</span>()<br><span class="hljs-comment">// http request 拦截器</span><br><span class="hljs-comment">// 每次请求都为http头增加Authorization字段，其内容为Token</span><br>http.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (token) &#123;<br>      config.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = token;<br>    &#125;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">// http response 拦截器</span><br>http.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> data = response.<span class="hljs-property">data</span><br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-keyword">return</span> data.<span class="hljs-property">data</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">401</span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/login&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(data)<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> http<br><br></code></pre></td></tr></table></figure><hr><p>此处抽象了前端的服务<br><strong>service&gt;index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> authorization <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/authorization&#x27;</span><br><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@config&#x27;</span><br><span class="hljs-keyword">import</span> &#123; notification <span class="hljs-keyword">as</span> <span class="hljs-title class_">Notice</span>, message <span class="hljs-keyword">as</span> <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ant-design-vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router/router.js&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span> &#123;<br>  instance<br>  interceptors<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = axios.<span class="hljs-title function_">create</span>(config)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span> = config.<span class="hljs-property">interceptors</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">requestInterceptor</span>,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">requestInterceptorCatch</span><br>    )<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">responseInterceptor</span>,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">responseInterceptorCatch</span><br>    )<br><br>    <span class="hljs-comment">// 所有实例都共享的拦截器</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> config<br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> config.<span class="hljs-property">data</span><br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">request</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 单个请求对请求config的处理</span><br>      <span class="hljs-keyword">if</span> (config.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">requestInterceptor</span>) &#123;<br>        config = config.<span class="hljs-property">interceptors</span>.<span class="hljs-title function_">requestInterceptor</span>(config)<br>      &#125;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span><br>        .<span class="hljs-title function_">request</span>(config)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 单个请求对数据的处理</span><br>          <span class="hljs-keyword">if</span> (config.<span class="hljs-property">interceptors</span>?.<span class="hljs-property">responseInterceptor</span>) &#123;<br>            res = config.<span class="hljs-property">interceptors</span>.<span class="hljs-title function_">responseInterceptor</span>(res)<br>          &#125;<br><br>          <span class="hljs-comment">// 将结果resolve返回出去</span><br>          <span class="hljs-title function_">resolve</span>(res)<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(err)<br>          <span class="hljs-keyword">return</span> err<br>        &#125;)<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span> &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">post</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span> &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">delete</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;DELETE&#x27;</span> &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">patch</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PATCH&#x27;</span> &#125;)<br>  &#125;<br><br>  <span class="hljs-title function_">put</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123; ...config, <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span> &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 这里的config也都是形参</span><br><span class="hljs-comment">// 例如: requestInterceptor属性值~其实是一个函数调用</span><br><span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(&#123;<br>  <span class="hljs-attr">interceptors</span>: &#123;<br>    <span class="hljs-attr">requestInterceptor</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> token = authorization.<span class="hljs-title function_">getToken</span>()<br>      <span class="hljs-keyword">if</span> (token) &#123;<br>        config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = token<br>      &#125;<br>      <span class="hljs-keyword">return</span> config<br>    &#125;,<br>    <span class="hljs-attr">requestInterceptorCatch</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> err<br>    &#125;,<br>    <span class="hljs-attr">responseInterceptor</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span><br>      <span class="hljs-keyword">const</span> error = &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作失败&#x27;</span>,<br>        <span class="hljs-attr">method</span>: res.<span class="hljs-property">config</span>.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">url</span>: res.<span class="hljs-property">config</span>.<span class="hljs-property">url</span>,<br>        <span class="hljs-attr">status</span>: res.<span class="hljs-property">status</span>,<br>        <span class="hljs-attr">code</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span>,<br>        <span class="hljs-attr">message</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span><br>      &#125;<br>      <br>      <span class="hljs-comment">// 请求成功</span><br>      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-keyword">return</span> data<br>      &#125;<br>      <span class="hljs-comment">// 未登录或登录过期</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> === <span class="hljs-number">401</span>) &#123;<br>        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>()<br>        <span class="hljs-keyword">const</span> route = &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span><br>        &#125;<br>        router.<span class="hljs-title function_">replace</span>(route)<br>      &#125; <br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!data?.<span class="hljs-property">code</span>) &#123;<br>        <span class="hljs-keyword">return</span> res<br>      &#125;<br>      <span class="hljs-comment">// 其它情况</span><br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">showMessage</span>(error)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">responseInterceptorCatch</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!e.<span class="hljs-property">config</span>?.<span class="hljs-property">method</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>      <span class="hljs-keyword">const</span> error = &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;系统提示&#x27;</span>,<br>        <span class="hljs-attr">method</span>: e.<span class="hljs-property">config</span>.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">url</span>: e.<span class="hljs-property">config</span>.<span class="hljs-property">url</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-literal">undefined</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">response</span> &amp;&amp; e.<span class="hljs-property">response</span>.<span class="hljs-property">data</span> &amp;&amp; e.<span class="hljs-property">response</span>.<span class="hljs-property">msg</span>) &#123;<br>        error.<span class="hljs-property">msg</span> = e.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.<span class="hljs-property">message</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;timeout&#x27;</span>) &amp;&amp; e.<span class="hljs-property">code</span> === <span class="hljs-string">&#x27;ECONNABORTED&#x27;</span>) &#123;<br>        error.<span class="hljs-property">msg</span> = e.<span class="hljs-property">message</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        error.<span class="hljs-property">msg</span> = e.<span class="hljs-property">message</span><br>      &#125;<br>      <span class="hljs-title function_">showMessage</span>(error)<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
      <category>vue-router</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql_test</title>
    <link href="/2023/10/24/sql-test/"/>
    <url>/2023/10/24/sql-test/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> p.name<br><span class="hljs-keyword">from</span> project <span class="hljs-keyword">as</span> p<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> workfile <span class="hljs-keyword">as</span> w <span class="hljs-keyword">on</span> w.pid <span class="hljs-operator">=</span> p.id<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> employee <span class="hljs-keyword">as</span> e <span class="hljs-keyword">on</span> w.eid <span class="hljs-operator">=</span> e.id<br><span class="hljs-keyword">where</span> eid <span class="hljs-operator">=</span> <span class="hljs-number">25638</span> <span class="hljs-keyword">and</span> e.type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;普通员工&#x27;</span>;<br><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(w.score)<br><span class="hljs-keyword">from</span> workfile <span class="hljs-keyword">as</span> w<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> employee <span class="hljs-keyword">as</span> e <span class="hljs-keyword">on</span> e.id <span class="hljs-operator">=</span> w.eid<br><span class="hljs-keyword">where</span> e.id <span class="hljs-operator">=</span> <span class="hljs-number">25638</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> e.name<br><span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> workfile <span class="hljs-keyword">as</span> w <span class="hljs-keyword">on</span> w.eid <span class="hljs-operator">=</span> e.id<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> project <span class="hljs-keyword">as</span> p <span class="hljs-keyword">on</span> p.id <span class="hljs-operator">=</span> w.pid<br><span class="hljs-keyword">where</span> p.manager <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;夏丽&#x27;</span> <span class="hljs-keyword">and</span> e.type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;普通员工&#x27;</span>;<br><br> <br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> e.name<br><span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> workfile <span class="hljs-keyword">as</span> w <span class="hljs-keyword">on</span> w.eid <span class="hljs-operator">=</span> e.id<br><span class="hljs-keyword">where</span> w.pid <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">select</span> pid<br>    <span class="hljs-keyword">from</span> workfile <span class="hljs-keyword">as</span> w<br>    <span class="hljs-keyword">where</span> eid <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">select</span> e.id <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">as</span> e<br>            <span class="hljs-keyword">where</span> e.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;夏丽&#x27;</span> <br>    )<br>)<br><br><span class="hljs-keyword">select</span> A.name, B.app<br><span class="hljs-keyword">from</span> A<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> B <span class="hljs-keyword">on</span> B.id <span class="hljs-operator">=</span> A.id<br><span class="hljs-keyword">where</span> A.id <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> (<br>        <span class="hljs-keyword">select</span> id, <span class="hljs-built_in">count</span>(app) <span class="hljs-keyword">as</span> cnt<br>            <span class="hljs-keyword">from</span> B<br>            <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> app<br>            <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cnt <span class="hljs-keyword">desc</span> limit <span class="hljs-number">1</span><br>        )<br>)<br><br><br><span class="hljs-keyword">select</span> name<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> name<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(score) <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">WITH</span> RankedSales <span class="hljs-keyword">AS</span> (<br>    <span class="hljs-keyword">SELECT</span><br>        <span class="hljs-type">date</span>,<br>        product_id,<br>        customer_id,<br>        revenue,<br>        <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-type">date</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> revenue <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> SalesRank<br>    <span class="hljs-keyword">FROM</span><br>        sales<br>)<br><br><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-type">date</span>,<br>    product_id,<br>    customer_id,<br>    revenue<br><span class="hljs-keyword">FROM</span><br>    RankedSales<br><span class="hljs-keyword">WHERE</span><br>    SalesRank <span class="hljs-operator">&lt;=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    <span class="hljs-type">date</span>, SalesRank;<br><br><span class="hljs-keyword">delete</span> s1<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">as</span> s1<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> student <span class="hljs-keyword">as</span> s2 <span class="hljs-keyword">on</span> s2.`学号` <span class="hljs-operator">=</span><span class="hljs-operator">=</span> s1.`学号`<br>                    <span class="hljs-keyword">and</span> s2.`姓名` <span class="hljs-operator">=</span><span class="hljs-operator">=</span> s1.`姓名`<br>                    <span class="hljs-keyword">and</span> s2.`课程编号` <span class="hljs-operator">=</span><span class="hljs-operator">=</span> s1.`课程编号`<br>                    <span class="hljs-keyword">and</span> s2.`课程名称` <span class="hljs-operator">=</span><span class="hljs-operator">=</span> s1.`课程名称`<br>                    <span class="hljs-keyword">and</span> s2.`分数` <span class="hljs-operator">=</span><span class="hljs-operator">=</span> s1.`分数`<br><span class="hljs-keyword">where</span> s1.`自动编号` <span class="hljs-operator">&gt;</span> s2.`自动编号`;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot_anaotation</title>
    <link href="/2023/10/24/springboot-anaotation/"/>
    <url>/2023/10/24/springboot-anaotation/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-annotation"><a href="#springboot-annotation" class="headerlink" title="springboot annotation"></a>springboot annotation</h1><ol><li>@SpringBootApplication:</li></ol><p>作用：用于标识主应用程序类，通常位于项目的入口点，它会启用Spring Boot的自动配置和组件扫描。<br>2. @Controller:</p><p>作用：用于定义控制器类，处理HTTP请求，并将处理结果返回给客户端。<br>3. @RestController:</p><p>作用：与@Controller类似，但在每个方法上都会自动添加@ResponseBody注解，将方法返回的对象序列化为JSON响应。<br>4. @RequestMapping:</p><p>作用：用于映射HTTP请求到处理方法，并指定请求的URL路径。<br>5. @GetMapping, @PostMapping, @PutMapping, @DeleteMapping:</p><p>作用：这些注解分别用于映射HTTP GET、POST、PUT和DELETE请求，简化了@RequestMapping的使用。<br>6. @RequestParam:</p><p>作用：用于从HTTP请求中获取请求参数的值，通常用于处理GET请求的查询参数。<br>7. @PathVariable:</p><p>作用：用于从URL中提取路径变量的值，通常用于RESTful风格的请求。<br>8. @RequestBody:</p><p>作用：用于将HTTP请求的主体部分反序列化为Java对象，通常用于处理POST请求的JSON或XML数据。<br><strong>此处前端必须使用POST方法提交，该注解最多存在一个</strong><br>9. @Autowired:<br>取代了set和get函数<br>作用：用于自动装配Spring Bean，通常用于注入依赖关系。<br>10. @Service, @Repository, @Component:</p><p>作用：用于定义Spring组件，分别表示服务层、数据访问层和通用组件。<br>11. @Configuration:</p><p>作用：用于定义配置类，可以替代XML配置文件。<br>12. @Value:</p><p>作用：用于注入外部属性值，通常从application.properties或application.yml文件中读取属性。<br>13. @EnableAutoConfiguration:</p><p>作用：用于启用Spring Boot的自动配置功能，根据项目的依赖自动配置应用程序。<br>14. @Conditional:</p><p>作用：用于根据特定条件来决定是否创建Bean或配置，可用于自定义自动配置。<br>15. @EnableWebSecurity:</p><p>作用：用于启用Spring Security的Web安全功能，可以配置身份验证和授权。</p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring_bean</title>
    <link href="/2023/10/24/spring-bean/"/>
    <url>/2023/10/24/spring-bean/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-boot-的-Bean注解"><a href="#spring-boot-的-Bean注解" class="headerlink" title="spring boot 的@Bean注解"></a>spring boot 的@Bean注解</h1><ol><li>在@Configuration类中使用：通常，@Bean注解是在一个带有@Configuration注解的类中使用的。这表明这个类包含了Bean的定义，Spring容器会在应用程序上下文中创建这些Bean。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MyBean <span class="hljs-title function_">myBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBean</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>方法级别注解：@Bean注解通常用在方法上，指示Spring容器应该调用这个方法以获取Bean的实例。方法名通常被用作Bean的名称，但你也可以使用name属性来指定Bean的名称。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MyBean <span class="hljs-title function_">myBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBean</span>();<br>&#125;<br><br><br><span class="hljs-meta">@Bean(name = &quot;customBeanName&quot;)</span><br><span class="hljs-keyword">public</span> MyBean <span class="hljs-title function_">myBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBean</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Upward_surplus</title>
    <link href="/2023/10/23/Upward-surplus/"/>
    <url>/2023/10/23/Upward-surplus/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp-常用向上取余做法"><a href="#cpp-常用向上取余做法" class="headerlink" title="cpp 常用向上取余做法"></a>cpp 常用向上取余做法</h1><p>假设 x &#x2F; y向上取余<br>(x + y) &#x2F; y<br>向下取余<br>x &#x2F; y<br><img src="https://leetcode.cn/problems/minimum-number-of-groups-to-create-a-valid-assignment/solutions/2493313/ben-ti-zui-jian-dan-xie-fa-pythonjavacgo-t174/" alt="leetcode 题目"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minGroupsForValidAssignment</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cnt;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; a : nums) &#123;<br>            cnt[a]++;<br>        &#125;<br>        <span class="hljs-type">int</span> k = <span class="hljs-built_in">min_element</span>(cnt.<span class="hljs-built_in">begin</span>(), cnt.<span class="hljs-built_in">end</span>(), [&amp;](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; a, <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> a.second &lt; b.second;<br>        &#125;)-&gt;second;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; check = [&amp;](<span class="hljs-type">int</span> nums, <span class="hljs-type">int</span> q) -&gt; <span class="hljs-type">int</span> &#123;<br>            <span class="hljs-type">int</span> a = nums / q, b = nums % q;<br>            <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">return</span> (nums + q) / (q + <span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">bool</span> ok = <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> group = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [x, y] : cnt) &#123;<br>                <span class="hljs-type">int</span> t;<br>                <span class="hljs-keyword">if</span> ((t = <span class="hljs-built_in">check</span>(y, k)) == <span class="hljs-number">-1</span>) &#123;<br>                    ok = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>;<br>                &#125;<br>                group += t;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ok) <span class="hljs-keyword">return</span> group;<br>            k--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>向上取余</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js_this_visit</title>
    <link href="/2023/10/19/js-this-visit/"/>
    <url>/2023/10/19/js-this-visit/</url>
    
    <content type="html"><![CDATA[<h1 id="visit-js-attr-by-or"><a href="#visit-js-attr-by-or" class="headerlink" title="visit js attr by . or []"></a>visit js attr by . or []</h1><p>在 JavaScript 中，你可以使用点运算符（.）来访问对象的属性，但这些属性的名称必须是合法的标识符。标识符必须符合以下规则：</p><ol><li>必须以字母、下划线（_）或美元符号（$）开头。</li><li>可以包含字母、数字、下划线或美元符号。</li></ol><p>因此，只有合法的标识符才能用点运算符来访问属性。<br>如果属性名不符合这些规则，你应该使用方括号运算符（[]）来访问属性。<br>方括号运算符允许你使用字符串或表达式来访问属性，这在处理动态属性名时非常有用。<br>可以将对象成员函数记录其字符串，然后通过map存储这些字符串，最后调用合适的函数.</p>]]></content>
    
    
    <categories>
      
      <category>javaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>this. []</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_computed</title>
    <link href="/2023/10/19/vue-computed/"/>
    <url>/2023/10/19/vue-computed/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-的-computed属性"><a href="#vue-的-computed属性" class="headerlink" title="vue 的 computed属性"></a>vue 的 computed属性</h1><p>官网原话<br>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 author.books 不改变，无论多少次访问 publishedBooksMessage 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p><p>这也解释了为什么下面的计算属性永远不会更新，因为 Date.now() 并不是一个响应式依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-title function_">now</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>computed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_slots</title>
    <link href="/2023/10/18/vue-slots/"/>
    <url>/2023/10/18/vue-slots/</url>
    
    <content type="html"><![CDATA[<h1 id="slots-in-vue"><a href="#slots-in-vue" class="headerlink" title="slots in vue"></a>slots in vue</h1><h2 id="最普通的插槽"><a href="#最普通的插槽" class="headerlink" title="最普通的插槽"></a>最普通的插槽</h2><p><strong>意思是当父组件使用子组件时，可以将父组件的内容渲染在子组件的固定位置</strong><br>in the parent template and the son template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- the parent template --&gt;<br>&lt;FancyButton&gt;<br>    Click me &lt;!-- 插槽内容 --&gt;<br>&lt;/FancyButton&gt;<br><br>&lt;!-- the son template --&gt;<br>&lt;button&gt;<br>    &lt;slot&gt;&lt;/slot&gt; &lt;!-- 插槽出口(即内容应该被渲染的地方) --&gt;<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>the content in the parent template will be rendered in the the slot label in the son template</strong></p><p>just like </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button&gt;Click me&lt;/button&gt;<br></code></pre></td></tr></table></figure><h2 id="具备名字的插槽"><a href="#具备名字的插槽" class="headerlink" title="具备名字的插槽"></a>具备名字的插槽</h2><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template slot=&quot;myslot&quot;&gt;<br>    &lt;div&gt;<br>        slot content in parent<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h4&gt;xxx&lt;/h4&gt;<br>        &lt;!-- 父组件内容要被渲染的地方 --&gt;<br>        &lt;!-- default slot --&gt;<br>        &lt;slot&gt;&lt;/slot&gt;<br>        &lt;!-- name slot --&gt;<br>        &lt;slot name=&quot;myslot&quot;&gt;&lt;/slot&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p><strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。简单的所，就是父组件中不能直接用子组件中定义的data数据。而slot-scope的出现就是解决了这样的问题。</strong></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>slot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_import_export</title>
    <link href="/2023/10/17/vue-import-export/"/>
    <url>/2023/10/17/vue-import-export/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue4-导入导出详解"><a href="#Vue4-导入导出详解" class="headerlink" title="Vue4 导入导出详解"></a>Vue4 导入导出详解</h1><ol><li>如果vue导入js文件时该文件夹下只有这一个js文件, 可以写到文件夹为止, vue会默认查找index.js作为入口文件</li><li>如果 import MyComponent from ‘.&#x2F;components’<br>依旧默认查找index.js但是如果不存在就找myComponent.js</li></ol><p><strong>为了以防万一可以导入写到vue文件为止，一般不用写后缀，写后缀也可以</strong></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>import</tag>
      
      <tag>export</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_EIDSIR</title>
    <link href="/2023/10/17/vue-EIDSIR/"/>
    <url>/2023/10/17/vue-EIDSIR/</url>
    
    <content type="html"><![CDATA[<h2 id="vue报错-EISDIR-illegal-operation-on-a-directory-read解决"><a href="#vue报错-EISDIR-illegal-operation-on-a-directory-read解决" class="headerlink" title="vue报错: EISDIR: illegal operation on a directory, read解决"></a>vue报错: EISDIR: illegal operation on a directory, read解决</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">EISDIR: illegal operation on a directory, read<br>Internal server error: EISDIR: illegal operation on a directory, read<br></code></pre></td></tr></table></figure><p>引入子组件只引入到了文件夹，xxx&#x2F;dir&#x2F;index.vue, but juse xxx&#x2F;dir</p><p>juse link to the javaScript import and export rules.md<br>[vue import and export](<a href="/2023/10/17/vue-import-export/" title="vue_import_export">vue_import_export</a>#vue 导入导出模块细则)<br>[js knowledge](<a href="/2023/10/14/js-this/" title="js-this">js-this</a># javaScript knowledge)</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>EIDSIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue_base</title>
    <link href="/2023/10/17/vue-base/"/>
    <url>/2023/10/17/vue-base/</url>
    
    <content type="html"><![CDATA[<h1 id="vue的基本使用"><a href="#vue的基本使用" class="headerlink" title="vue的基本使用"></a>vue的基本使用</h1><h1 id="vue-选项式"><a href="#vue-选项式" class="headerlink" title="vue 选项式"></a>vue 选项式</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm create vue@latest / npm create vue<br></code></pre></td></tr></table></figure><h2 id="vue的文件组织形式"><a href="#vue的文件组织形式" class="headerlink" title="vue的文件组织形式"></a>vue的文件组织形式</h2><p>-src<br>    -components (基本的布局组件等)<br>    -views (存放各个页面的组件–一堆.vue files)<br>    -assests (存放网页必要的图片资源)<br>    -App.vue (<strong>default 根组件</strong>)<br>    -main.js<br>通过createApp传入的是一个标准的组件创建一个应用实例, 此处是根组件</p><h3 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h3><p><strong>应用实例必须在调用了 .mount() 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;app&quot;&gt;<br>    ....<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="vue的script基本使用"><a href="#vue的script基本使用" class="headerlink" title="vue的script基本使用"></a>vue的script基本使用</h2><p><strong>以下均为选项式api</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  // data() 返回的属性将会成为响应式的状态<br>  // 并且暴露在 `this` 上<br>  data() &#123;<br>    return &#123;<br>      count: 0<br>    &#125;<br>  &#125;,<br><br>  // methods 是一些用来更改状态与触发更新的函数<br>  // 它们可以在模板中作为事件处理器绑定<br>  methods: &#123;<br>    increment() &#123;<br>      this.count++<br>    &#125;<br>  &#125;,<br><br>  // 生命周期钩子会在组件生命周期的各个不同阶段被调用<br>  // 例如这个函数就会在组件挂载完成后被调用<br>  mounted() &#123;<br>    console.log(`The initial count is $&#123;this.count&#125;.`)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="vue-router基本使用"><a href="#vue-router基本使用" class="headerlink" title="vue-router基本使用"></a>vue-router基本使用</h2><!-- 路由匹配到的组件会渲染在这里 --><p><router-view></router-view></p><p>最好单独写一个router.js文件来处理路由问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// router.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserSettings</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/UserSettings.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserEmailsSubscriptions</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/UserEmailsSubscriptions.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserProfile</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/UserProfile.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">UserProfilePreview</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/UserProfilePreview.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/settings&#x27;</span>,<br>      <span class="hljs-comment">// You could also have named views at tho top</span><br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserSettings</span>,<br>      <span class="hljs-attr">children</span>: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;emails&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-title class_">UserEmailsSubscriptions</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;profile&#x27;</span>,<br>          <span class="hljs-attr">components</span>: &#123;<br>            <span class="hljs-attr">default</span>: <span class="hljs-title class_">UserProfile</span>,<br>            <span class="hljs-attr">helper</span>: <span class="hljs-title class_">UserProfilePreview</span>,<br>          &#125;,<br>        &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>同时在main.js中导入router.js中使用createRouter()创建出的路由对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//此处命名导出</span><br><span class="hljs-keyword">import</span> &#123; router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-comment">//将App.vue根组件作为应用挂载的容器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router)<br><span class="hljs-comment">// 将App挂载到div id=app上</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>)<br></code></pre></td></tr></table></figure><p>路由的界面将会在<router-view></router-view><br>中渲染出来<br>当然也有采用render api 或者h()函数创建类似router-view的效果</p><h1 id="Vue-组合式"><a href="#Vue-组合式" class="headerlink" title="Vue 组合式"></a>Vue 组合式</h1><p><strong>要在组件模板访问ref,在<code>setup()</code>函数中声明并返回他们:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// `setup` 是一个特殊的钩子，专门用于组合式 API。</span><br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">// 将 ref 暴露给模板</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      count<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="暴露大量状态和方法的最佳实践-best-practice"><a href="#暴露大量状态和方法的最佳实践-best-practice" class="headerlink" title="暴露大量状态和方法的最佳实践(best practice)"></a>暴露大量状态和方法的最佳实践(best practice)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  count.<span class="hljs-property">value</span>++<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123; count &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>&lt;script setup&gt;&lt;/script&gt;</code>中的顶层导入，声明的变量都可以在同一组件的模板中使用.</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>如下只有<code>.value</code>的访问会被追踪</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">nested</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;,<br>  <span class="hljs-attr">arr</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>]<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mutateDeeply</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 以下都会按照期望工作</span><br>  obj.<span class="hljs-property">value</span>.<span class="hljs-property">nested</span>.<span class="hljs-property">count</span>++<br>  obj.<span class="hljs-property">value</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;baz&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p><code>reactive()</code>将使对象本身具有响应性.</p><p>响应式对象是 JavaScript 代理，其行为就和普通对象一样。不同的是，Vue 能够拦截对响应式对象所有属性的访问和修改，以便进行依赖追踪和触发更新。</p><p><code>reactive()</code> 将深层地转换对象：当访问嵌套对象时，它们也会被 reactive() 包装。当<code>ref</code> 的值是一个对象时，ref() 也会在内部调用它。与浅层<code>ref</code>类似，这里也有一个 shallowReactive() API 可以选择退出深层响应性。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p><strong>只有代理对象是响应式的，更改原始对象不会触发更新。因此，使用 Vue 的响应式系统的最佳实践是 仅使用你声明对象的代理版本。</strong></p><p>为保证访问代理的一致性，对同一个原始对象调用<code> reactive()</code> 会总是返回同样的代理对象，而对一个已存在的代理对象调用 <code>reactive()</code> 会返回其本身：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在同一个对象上调用 reactive() 会返回相同的代理</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reactive</span>(raw) === proxy) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 在一个代理上调用 reactive() 会返回它自己</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reactive</span>(proxy) === proxy) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>这个规则对嵌套对象也适用。依靠深层响应性，响应式对象内的嵌套对象依然是代理：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-title function_">reactive</span>(&#123;&#125;)<br><br><span class="hljs-comment">// 往响应式对象里添加新的值或对象, 他也会变成响应式的代理, 和原本不同</span><br><span class="hljs-keyword">const</span> raw = &#123;&#125;<br>proxy.<span class="hljs-property">nested</span> = raw<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">nested</span> === raw) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="reactive-的局限性"><a href="#reactive-的局限性" class="headerlink" title="reactive()的局限性"></a><code>reactive()</code>的局限性</h3><p><code>reactive()</code>的局限性:</p><ol><li><p>有限的值类型: 只有对象类型(object, array, Map, Set) 不包括string, number, boolean的原始类型</p></li><li><p>不能替换整个对象：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">// 上面的 (&#123; count: 0 &#125;) 引用将不再被追踪</span><br><span class="hljs-comment">// (响应性连接已丢失！)</span><br>state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;)<br></code></pre></td></tr></table></figure></li><li><p>对解构操作不友好：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">// 当解构时，count 已经与 state.count 断开连接</span><br><span class="hljs-keyword">let</span> &#123; count &#125; = state<br><span class="hljs-comment">// 不会影响原始的 state</span><br>count++<br><br><span class="hljs-comment">// 该函数接收到的是一个普通的数字</span><br><span class="hljs-comment">// 并且无法追踪 state.count 的变化</span><br><span class="hljs-comment">// 我们必须传入整个对象以保持响应性</span><br><span class="hljs-title function_">callSomeFunction</span>(state.<span class="hljs-property">count</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="建议使用ref-作为主要API"><a href="#建议使用ref-作为主要API" class="headerlink" title="建议使用ref()作为主要API"></a>建议使用<code>ref()</code>作为主要API</h2><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>在计算属性<code>computed()</code><br>表面上留下的是一个响应式的属性值, 其实是调用了函数<br><strong>example</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; reactive, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> author = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">books</span>: [<br>    <span class="hljs-string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,<br>    <span class="hljs-string">&#x27;Vue 3 - Basic Guide&#x27;</span>,<br>    <span class="hljs-string">&#x27;Vue 4 - The Mystery&#x27;</span><br>  ]<br>&#125;)<br><br><span class="hljs-comment">// 一个计算属性 ref</span><br><span class="hljs-keyword">const</span> publishedBooksMessage = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> author.<span class="hljs-property">books</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>&#125;)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Has published books:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>此处定义了一个计算属性<code>publishedBooksMessage</code>.<code>computed()</code>期望接收一个getter函数<br>，返回值为一个计算属性ref。可以通过publishedBooksMessage.value访问计算结果, ref在模板中会自动解包</p><h4 id="与样式绑定"><a href="#与样式绑定" class="headerlink" title="与样式绑定"></a>与样式绑定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="上的v-if"><a href="#上的v-if" class="headerlink" title="&lt;template&gt;上的&lt;code&gt;v-if&lt;/code&gt;"></a><code>&lt;template&gt;上的&lt;code&gt;v-if&lt;/code&gt;</code></h4><p>此处的渲染结果不包括外部的<code><code>&lt;template&gt;&lt;/template&gt;</code></code><br>同理<code>v-else</code>和<code>v-else-if</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;template v-if=&quot;ok&quot;&gt;<br>  &lt;h1&gt;Title&lt;/h1&gt;<br>  &lt;p&gt;Paragraph 1&lt;/p&gt;<br>  &lt;p&gt;Paragraph 2&lt;/p&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h4><p>也是按照条件显示, <code>v-show</code>会在DOM中保留该元素, 仅切换了该元素的<code>display</code>的CSS属性</p><p><strong>do not use <code>v-if</code> and <code>v-for</code> in a same element</strong><br>like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//bad</span><br>&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.isActive&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    &#123;&#123; user.name &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//good</span><br>&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in activeUsers&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    &#123;&#123; user.name &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="hljs-comment">// use a template in the outside</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.isActive&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&#123; user.name &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="best-practice"><a href="#best-practice" class="headerlink" title="best practice"></a>best practice</h3><p>在多层嵌套的 v-for 循环中，计算属性可能会变得不太适合使用，原因包括：</p><ol><li><p>性能问题：计算属性是基于它们的依赖进行缓存的，如果您有多层嵌套的循环，可能会导致大量计算属性的重新计算，从而影响性能。每次重新渲染都会触发计算属性的重新计算，而在多层嵌套的情况下，这可能需要大量的计算时间。</p></li><li><p>可读性问题：在多层嵌套中使用计算属性可能会导致代码难以理解和维护。计算属性通常用于派生单个值或对数据进行简单的转换，但在多层嵌套情况下，可能需要大量的计算属性来处理各种复杂的逻辑，这会使代码变得混乱。</p></li><li><p>可维护性问题：如果您在多个组件中需要访问相同的派生数据，而这些组件都有自己的计算属性，那么在后续维护中可能需要重复编写相似的计算属性逻辑，这会导致代码重复和维护困难。</p></li></ol><p>在这种情况下，更适合使用方法（methods）来处理复杂逻辑，因为方法不会被缓存，每次调用方法时都会执行逻辑，适用于处理多层嵌套的情况。您可以在模板中调用方法，以根据需要在每次渲染时执行逻辑。这可以提高性能和代码可维护性。</p><p><strong>总之，计算属性适合处理简单的派生数据，而在多层嵌套的情况下，使用方法通常更为合适。</strong></p><h2 id="事件处理和监听v-on或者"><a href="#事件处理和监听v-on或者" class="headerlink" title="事件处理和监听v-on或者@"></a>事件处理和监听<code>v-on</code>或者<code>@</code></h2><p>用法<code>v-on:click="handler"</code>或者<code>@click="handler"</code><br>即格式为<code>v-on:event(can be defined by self)="handler"(function name or inline statement)</code></p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>在Web API的Event对象API中存在以下实例方法<br><code>preventDefault()</code> : 阻止默认行为的发生, 告诉用户代理(一个人的计算机程序, 例如在Web的浏览器进程),如果此事件没有被显式处理, 此事件继续传播，除非遇到以下2个api。<br><code>stopImmerdiatePropagation</code>: 阻止之后添加的事件监听器对于事件的监听，而不管之前发生的。</p><h4 id="vue提供的事件修饰符"><a href="#vue提供的事件修饰符" class="headerlink" title="vue提供的事件修饰符"></a>vue提供的事件修饰符</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 单击事件将停止传递 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="hljs-comment">&lt;!-- 提交事件将不再重新加载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 修饰语可以使用链式书写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 也可以只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;</span><br><span class="hljs-comment">&lt;!-- 例如：事件处理器不来自子元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>调用顺序</strong><br><code>@click.prevent.self</code>会阻止元素及其子元素的所有点击事件的默认行为<br><code>@click.self.prevent</code>只会阻止对其元素本身的点击事件的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;!-- 添加事件监听器时，使用 <span class="hljs-string">`capture`</span> 捕获模式 --&gt;<br>&lt;!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&lt;!-- 点击事件最多被触发一次 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>&lt;!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 <span class="hljs-string">`onScroll`</span> 完成 --&gt;<br>&lt;!-- 以防其中包含 <span class="hljs-string">`event.preventDefault()`</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="vue-按键修饰符"><a href="#vue-按键修饰符" class="headerlink" title="vue 按键修饰符"></a>vue 按键修饰符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input @keyup.<span class="hljs-property">enter</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.page-down</span>=<span class="hljs-string">&quot;onPageDown&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code>(delete and backspace)</li><li><code>.esc</code></li><li><code>.up</code></li></ul><h4 id="js的事件处理"><a href="#js的事件处理" class="headerlink" title="js的事件处理"></a>js的事件处理</h4><ol><li><p>HTML事件处理:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;this.innerHTML += 1;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>DOM0级事件处理<br>通过选择器选择DOM节点元素, 为其发生的事件指定特定的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><br><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#box&#x27;</span>);<br>box.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>DOM2级事件处理<br><strong>绑定方式</strong><br><code>element.addEventListener(eventType, handler, userCapture)</code></p></li></ol><p><strong>移除方式</strong><br><code>element.removeEventListener(eventType, hanler, userCapture)</code></p><p>需要注意以下无效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">box.<span class="hljs-title function_">addEventListener</span>(<br>  <span class="hljs-string">&#x27;click&#x27;</span>,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;<br>  &#125;,<br>  <span class="hljs-literal">false</span><br>);<br><br>box.<span class="hljs-title function_">removeEventListener</span>(<br>  <span class="hljs-string">&#x27;click&#x27;</span>,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;<br>  &#125;,<br>  <span class="hljs-literal">false</span><br>);<br></code></pre></td></tr></table></figure><p>有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-number">1</span>;<br>&#125;<br>box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br>box.<span class="hljs-title function_">removeEventListner</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><h2 id="表单输入绑定v-model"><a href="#表单输入绑定v-model" class="headerlink" title="表单输入绑定v-model"></a>表单输入绑定v-model</h2><p><code>v-model</code>是简化了v-bind(属性绑定)和v-on(事件处理绑定)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//pre</span><br>&lt;input<br>  :value=<span class="hljs-string">&quot;text&quot;</span><br>  @input=<span class="hljs-string">&quot;event =&gt; text = event.target.value&quot;</span>/&gt;<br><br><span class="hljs-comment">// after</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>front</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js-this</title>
    <link href="/2023/10/14/js-this/"/>
    <url>/2023/10/14/js-this/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Knowledge-notes"><a href="#JavaScript-Knowledge-notes" class="headerlink" title="JavaScript Knowledge notes"></a>JavaScript Knowledge notes</h1><h2 id="this-in-javaScript"><a href="#this-in-javaScript" class="headerlink" title="this in javaScript"></a>this in javaScript</h2><p>它拥有不同的值，具体取决于它的使用位置：</p><ul><li>在方法中，this 指的是所有者对象。</li><li>单独的情况下，this 指的是全局对象。</li><li>在函数中，this 指的是全局对象。</li><li>在函数中，严格模式下，this 是 undefined。</li><li>在事件中，this 指的是接收事件的元素。</li></ul><p>在 JavaScript 的箭头函数（Arrow Function）中，this 的行为与传统的函数表达式（function expression）不同。在箭头函数中，this 的值是从封闭的（包含箭头函数的）函数中继承的，而不是动态绑定的。这种行为有时被称为 “词法作用域的 this”，因为它基于函数的词法作用域。</p><p>具体来说，箭头函数中的 this 是在函数定义时确定的，而不是在函数调用时确定的。这意味着箭头函数中的 this 将引用封闭作用域中的 this 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">regularFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Regular function this:&quot;</span>, <span class="hljs-variable language_">this</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">arrowFunction</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Arrow function this:&quot;</span>, <span class="hljs-variable language_">this</span>);<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br><br><span class="hljs-comment">// 在对象上调用方法</span><br>obj.<span class="hljs-property">regularMethod</span> = regularFunction;<br>obj.<span class="hljs-property">arrowMethod</span> = arrowFunction;<br><br>obj.<span class="hljs-title function_">regularMethod</span>(); <span class="hljs-comment">// Regular function this: &#123; key: &quot;value&quot; &#125;</span><br>obj.<span class="hljs-title function_">arrowMethod</span>();   <span class="hljs-comment">// Arrow function this: &#123; key: &quot;value&quot; &#125;</span><br><br><span class="hljs-comment">// 使用定时器</span><br><span class="hljs-built_in">setTimeout</span>(regularFunction, <span class="hljs-number">1000</span>); <span class="hljs-comment">// Regular function this: Window</span><br><span class="hljs-built_in">setTimeout</span>(arrowFunction, <span class="hljs-number">1000</span>);   <span class="hljs-comment">// Arrow function this: &#123; key: &quot;value&quot; &#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>基础语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">(param1, param2, …, paramN) =&gt; &#123; statements &#125;<br>(param1, param2, …, paramN) =&gt; expression<br><span class="hljs-comment">//相当于：(param1, param2, …, paramN) =&gt;&#123; return expression; &#125;</span><br><br><span class="hljs-comment">// 当只有一个参数时，圆括号是可选的：</span><br>(singleParam) =&gt; &#123; statements &#125;<br>singleParam =&gt; &#123; statements &#125;<br><br><span class="hljs-comment">// 没有参数的函数应该写成一对圆括号。</span><br>() =&gt; &#123; statements &#125;<br></code></pre></td></tr></table></figure><p>高级语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//加括号的函数体返回对象字面量表达式：</span><br>params =&gt; (&#123;<span class="hljs-attr">foo</span>: bar&#125;)<br><br><span class="hljs-comment">//支持剩余参数和默认参数</span><br>(param1, param2, ...rest) =&gt; &#123; statements &#125;<br>(param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; &#123;<br>statements &#125;<br><br><span class="hljs-comment">//同样支持参数列表解构</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params">[a, b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], &#123;x: c&#125; = &#123;x: a + b&#125;</span>) =&gt; a + b + c;<br><span class="hljs-title function_">f</span>();  <span class="hljs-comment">// 6</span><br><br></code></pre></td></tr></table></figure><h2 id="反引号"><a href="#反引号" class="headerlink" title="&#96;&#96;反引号"></a>&#96;&#96;反引号</h2><p>在JavaScript中，反引号（&#96;&#96;）通常用于创建模板字面量（template literals）</p><h2 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h2><p>在JavaScript中，可以使用方括号（[]）来访问对象的属性。对象的属性可以用点表示法（.）或方括号表示法来访问，这两种方法都可以用于获取对象属性的值。</p><h2 id="javaScript-导入导出模块细则"><a href="#javaScript-导入导出模块细则" class="headerlink" title="javaScript 导入导出模块细则"></a>javaScript 导入导出模块细则</h2><p>首先未导出的函数或变量只在当前模块可见</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出有2种类型，命名导出和默认导出<br>带有函数或变量的模块可以存储在任何外部文件中。</p><p><strong>命名导出</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(),<br>    <span class="hljs-attr">routes</span>: constantRouteMap<br>&#125;)<br><br><span class="hljs-comment">// second</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span><br><span class="hljs-keyword">export</span> &#123;a, b&#125;<br></code></pre></td></tr></table></figure><p><strong>默认导出(one file has only one default export)</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">message</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Bill&quot;</span>;<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">19</span>;<br><span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27; is &#x27;</span> + age + <span class="hljs-string">&#x27;years old.&#x27;</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> message;<br></code></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>导入也有2种方式, 具体取决于导出的方式即默认导出还是命名导出</p><p><strong>从命名导出中导入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123;name, age&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./person.js&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>从默认导出导入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">import</span> message <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./message.js&#x27;</span>;<br></code></pre></td></tr></table></figure><p>本地文件打开的网页形式无法导入导出</p><h2 id="js-syntax-and-assignment"><a href="#js-syntax-and-assignment" class="headerlink" title="js syntax and assignment"></a>js syntax and assignment</h2><p><code>...</code>展开运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">funciton <span class="hljs-title function_">sum</span>(<span class="hljs-params">x, y, z</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y + z;<br>&#125;<br><br><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(...numbers));<br><span class="hljs-comment">// same as above</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, numbers));<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">x, y, z</span>) &#123;&#125;<br><span class="hljs-keyword">var</span> args = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">// 2 ways</span><br><span class="hljs-title function_">myFunction</span>(...args);<br>myFunction.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br></code></pre></td></tr></table></figure><h2 id="prototype-chain"><a href="#prototype-chain" class="headerlink" title="prototype chain"></a>prototype chain</h2><p>通过如此做，在Person类中插入类成员函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>front</category>
      
      <category>javaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css_selector</title>
    <link href="/2023/10/14/css-selector/"/>
    <url>/2023/10/14/css-selector/</url>
    
    <content type="html"><![CDATA[<h1 id="the-sumary-for-CSS-selector"><a href="#the-sumary-for-CSS-selector" class="headerlink" title="the sumary for CSS selector"></a>the sumary for CSS selector</h1><p><strong>选择器</strong></p><ol><li><p>属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title]</span> &#123;<br>  ...<br>&#125;<br><span class="hljs-comment">/* 存在 href 属性并且属性值匹配&quot;https://example.org&quot;的 &lt;a&gt; 元素 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href=<span class="hljs-string">&quot;https://example.org&quot;</span>]</span> &#123;<br>  ....<br>&#125;<br><span class="hljs-comment">/* 存在 href 属性并且属性值包含&quot;example&quot;的 &lt;a&gt; 元素 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href*=<span class="hljs-string">&quot;example&quot;</span>]</span> &#123;<br>  ...<br>&#125;<br><br><span class="hljs-comment">/* 存在 class 属性并且属性值包含单词&quot;logo&quot;的&lt;a&gt;元素 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[class~=<span class="hljs-string">&quot;logo&quot;</span>]</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>!<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">官方说明</a></em></p></li><li><p>类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 所有含有 class=&quot;spacious&quot; 类的元素 */</span><br><span class="hljs-selector-class">.spacious</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br><span class="hljs-comment">/* 所有含有 class=&quot;spacious&quot; 类的 &lt;li&gt; 元素 */</span><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.spacious</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br><span class="hljs-comment">/* 所有同时含有“spacious”和“elegant”类的 &lt;li&gt; 元素 */</span><br><span class="hljs-comment">/* 例如 class=&quot;elegant retro spacious&quot; */</span><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.spacious</span><span class="hljs-selector-class">.elegant</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>!<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">官方说明</a></em></p><p><strong>组合器</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">element element | div p | 选择 &lt;div&gt; 元素内的所有 &lt;p&gt; 元素<br>element&gt;element | div &gt; p | 选择其父元素是 &lt;div&gt; 元素的所有 &lt;p&gt; 元素。<br>element+element | div + p | 选择所有紧随 &lt;div&gt; 元素之后的 &lt;p&gt; 元素。（一般就一个）<br>element1~element2 | p ~ ul | 选择&lt;ul&gt;要求前面有 &lt;p&gt; <br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.page-layout</span>,<br><span class="hljs-selector-class">.ant-layout</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow-x</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.layout-content</span> &#123;<br>  <span class="hljs-attribute">overflow-y</span>: scroll;<br>  <span class="hljs-comment">/* use &amp; to ref `.layout-content` and `::` is 伪元素选择器 */</span><br>  <span class="hljs-selector-tag">&amp;</span>::<span class="hljs-selector-tag">-webkit-scrollbar</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">8px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span>::<span class="hljs-selector-tag">-webkit-scrollbar-track</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e9e9e9e9</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span>::<span class="hljs-selector-tag">-webkit-scrollbar-thumb</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>front</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>selector</tag>
      
      <tag>组合器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css_basic</title>
    <link href="/2023/10/14/css-basic/"/>
    <url>/2023/10/14/css-basic/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS中一些常用属性还有必要模型"><a href="#CSS中一些常用属性还有必要模型" class="headerlink" title="CSS中一些常用属性还有必要模型"></a>CSS中一些常用属性还有必要模型</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 简写边框属性需要按照一定的顺序, </span><br><span class="hljs-comment">查文档就行 */</span><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-comment">/* border 是边框属性 */</span><br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid red;<br>  <span class="hljs-comment">/* 外边距属性 上右下左 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span> <span class="hljs-number">50px</span> <span class="hljs-number">75px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/* 内边距属性 */</span><br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span> <span class="hljs-number">50px</span> <span class="hljs-number">75px</span> <span class="hljs-number">100px</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CSS框模型"><a href="#CSS框模型" class="headerlink" title="CSS框模型"></a>CSS框模型</h2><p>css框模型说明 <a href="https://www.w3school.com.cn/css/css_boxmodel.asp">w3cschool</a><br>或者说盒模型</p><h2 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding 内边距"></a>padding 内边距</h2><p><strong>padding 会撑开盒子</strong><br><strong>padding实际上是内容和边框的距离</strong>.设置了padding，即设置了内容和边框的距离，本质上撑开了盒子<br>盒子会变大</p><p>仅设置了content和border的块元素idv<br>设置content的宽高度…</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">110px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上padding属性会把盒子撑开<br>example:<br>导航栏实际使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>朋友圈<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>QQ空间<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>呵呵呵呵呵呵<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>:inline-block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-comment">/* 在右边加上20的间距 */</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>; <br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>text-decoration:none 是为了去掉 a 标签的下划线。<br><strong>line-height:30px；与height相等，是为了使文本垂直居中</strong><br>既然要设置height，而a是行内元素，无法设置高度，故要对元素进行模式转换！<br>转化成block元素则没法横向排列，故转化为inline-block。<br>转化成inline-block，又会出现间隙，故要父元素font-size:0，子元素a标签另外设置font-size<br>每个导航栏的字数不一样多，3个，4个，5个，6个，若给定宽度会很不方便<br>所以只设置padding，根据content的宽度再去撑开盒子即可</p><h2 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin 外边距"></a>margin 外边距</h2><p><strong>margin的叠加</strong><br>margin外边距叠加有以下3种:</p><ol><li>同级元素外边距叠加</li><li>父子元素外边距叠加</li><li>空元素外边距叠加</li></ol>]]></content>
    
    
    <categories>
      
      <category>front</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>css框模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>October_plan</title>
    <link href="/2023/10/12/October-plan/"/>
    <url>/2023/10/12/October-plan/</url>
    
    <content type="html"><![CDATA[<h1 id="薯薯我的10月计划"><a href="#薯薯我的10月计划" class="headerlink" title="薯薯我的10月计划"></a>薯薯我的10月计划</h1><ol><li><strong>速通一个springboot+Vue的网盘项目</strong></li><li>完成老师要求写的论文method和lab部分，充实下lab图表分析，现在太单薄了</li></ol>]]></content>
    
    
    <categories>
      
      <category>plan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>plan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>why_chatgpt_greater_than_blog</title>
    <link href="/2023/10/11/why-chatgpt-greater-than-blog/"/>
    <url>/2023/10/11/why-chatgpt-greater-than-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="cpp的优先队列使用"><a href="#cpp的优先队列使用" class="headerlink" title="cpp的优先队列使用"></a>cpp的优先队列使用</h1><p>在cpp的优先队列priority_queue中你可以声明，需要存储在优先队列的变量类型，使用的存储结构，以及自定义的比较函数</p><p><strong>需要注意的是：</strong></p><ol><li>自定义比较函数时需要在函数模板处声明比较函数的类型，一种是decltype，另一种仿函数直接声明类或者结构体名称即可<br>实际上他的调用格式是__comp(first.child, second.child)好像是这样来着，仿函数他提前构造好了对象并调用operator()运算符<br>而decltype需要同时传入比较函数作为参数;</li><li>同时他的比较逻辑和正常排序是反的，这和建堆的比较操作算法有关，建议阅读堆相关文章, greater是小根堆，less是大根堆</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">topStudents</span><span class="hljs-params">(vector&lt;string&gt;&amp; positive_feedback, vector&lt;string&gt;&amp; negative_feedback, vector&lt;string&gt;&amp; report, vector&lt;<span class="hljs-type">int</span>&gt;&amp; student_id, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = student_id.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">score</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>        unordered_set&lt;string&gt; ps, nps;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; str : positive_feedback) &#123;<br>            ps.<span class="hljs-built_in">insert</span>(str);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; str : negative_feedback) &#123;<br>            nps.<span class="hljs-built_in">insert</span>(str);<br>        &#125;<br>        <span class="hljs-keyword">auto</span> cmp = [&amp;](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">bool</span> &#123;<br>            <span class="hljs-keyword">if</span> (score[i] == score[j]) &#123;<br>                <span class="hljs-keyword">return</span> student_id[i] &gt; student_id[j];<br>            &#125;<br>            <span class="hljs-keyword">return</span> score[i] &lt; score[j];<br>        &#125;;<br>        priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-keyword">decltype</span>(cmp)&gt; <span class="hljs-built_in">q</span>(cmp);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">auto</span> sent = report[i];<br>            <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>, sc = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (; j &lt; sent.<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (sent[j] == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    string word = sent.<span class="hljs-built_in">substr</span>(k, j - k);<br>                    <span class="hljs-keyword">if</span> (ps.<span class="hljs-built_in">count</span>(word)) sc += <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">if</span> (nps.<span class="hljs-built_in">count</span>(word)) sc -= <span class="hljs-number">1</span>;<br>                    k = j + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k &lt; sent.<span class="hljs-built_in">size</span>()) &#123;<br>                string w = sent.<span class="hljs-built_in">substr</span>(k);<br>                <span class="hljs-keyword">if</span> (ps.<span class="hljs-built_in">count</span>(w)) sc += <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">if</span> (nps.<span class="hljs-built_in">count</span>(w)) sc -= <span class="hljs-number">1</span>;<br>            &#125;<br>            score[i] = sc;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">while</span> (k--) &#123;<br>            ans.<span class="hljs-built_in">emplace_back</span>(student_id[q.<span class="hljs-built_in">top</span>()]);<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chatgpt</tag>
      
      <tag>blog</tag>
      
      <tag>priority_queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>help_bro_10.10</title>
    <link href="/2023/10/10/help-bro-10-10/"/>
    <url>/2023/10/10/help-bro-10-10/</url>
    
    <content type="html"><![CDATA[<p>hhh今天一整个课题组都帮助大师兄做卷子，现在这就业情景逼人如此啊，早些年可以大富大贵，现在最多温饱</p><p>又从师姐那边继承了一份代码作为一部分遗产，但是感觉不一定有很大作用，希望这个月顺利完成论文<br>优先把lab部分水完，可能要额外补一点试探性实验毕竟时间不多，速通是必要的。</p>]]></content>
    
    
    <categories>
      
      <category>研究生的碎碎念</category>
      
      <category>thesis_plan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>研究生的碎碎念</tag>
      
      <tag>help</tag>
      
      <tag>theis_plan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dinic</title>
    <link href="/2023/10/10/Dinic/"/>
    <url>/2023/10/10/Dinic/</url>
    
    <content type="html"><![CDATA[<p>最大流问题，是网络流理论研究的一个基本问题，求网络中一个可行流 f ∗ f*f∗，使其流量 v ( f ) v(f)v(f)达到最大， 这种流 f ff 称为最大流，这个问题称为 (网络)最大流问题。</p><p>最大流问题是一个特殊的线性规划问题，就是在容量网络中，寻找流量最大的可行流。</p><p>下面我们用一个例子来直观理解网络最大流问题</p><p>如下图所示，S处是一个水源，图中的弧是水管，管道由于材质、直径的不同，其所能承受的输水量也不同，所以就出现了下图所示的不同数值的弧，我们的目标是将水源从 S 通过管道运输到 T 点，且在满足管道能承受的输水量的前提下尽可能使得输送到 T 点的水最大化</p><p>1.采用Dinic算法实现网络最大流模拟，里面主要分为原始网络和残余网络，原始网络组成为edge: u, v, capacity<br>    Dinic算法首先使用近似邻接表的做法设置数据结构，其中邻接表存储的内容为next_vertice, capacity, flow.然后循环，循环条件为bfs还能找到可以增广的边，之后在采用dfs搜索所有可以增大的流量。<br>2.Repeat<br>While Bfs(src, dest, level, g) is True<br>&#x2F;&#x2F; Bfs<br>Set level array to all -1 with v_size length<br>Level[src] &#x3D; 0<br>Queue.push(src)<br>While queue is not empty<br>Pop element and search the neighbor edge<br>V, f, c from edge struct<br>If level[v] &#x3D;&#x3D; -1 &amp;&amp; f &lt; c<br>    Level[v] &#x3D; level[u] + 1<br>    Queue.push(v)<br>Return level[dest] &gt;&#x3D; 0<br>&#x2F;&#x2F;<br>Dfs 找到当前可以添加的保守最小流量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs input">6 个点 10条边 0源点 5汇点<br>edge: head tail capacity set flow as 0<br>6 10 0 5<br>0 1 16<br>0 2 13<br>1 2 10<br>1 3 12<br>2 1 4<br>2 4 14<br>3 2 9<br>3 5 20<br>4 3 7<br>4 5 4<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs output">u-&gt;v:0-&gt;1<br>u-&gt;v:1-&gt;3<br>u-&gt;v:3-&gt;5<br>expand capacity: 20<br>expand capacity: 12<br>expand capacity: 12<br>u-&gt;v:0-&gt;1<br>expand capacity: 0<br>u-&gt;v:0-&gt;2<br>u-&gt;v:2-&gt;4<br>u-&gt;v:4-&gt;5<br>expand capacity: 4<br>expand capacity: 4<br>expand capacity: 4<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N, M, S, T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rwFile</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;./io_put/input&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;./io_put/output&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span> &#123;<br>    <span class="hljs-type">int</span> v, capacity, flow;<br>    <span class="hljs-built_in">edge</span>(<span class="hljs-type">int</span> _x, <span class="hljs-type">int</span> _y, <span class="hljs-type">int</span> _z) : <span class="hljs-built_in">v</span>(_x), <span class="hljs-built_in">capacity</span>(_y), <span class="hljs-built_in">flow</span>(_z) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> src, <span class="hljs-type">int</span> dest, <span class="hljs-type">int</span> v_size, </span></span><br><span class="hljs-params"><span class="hljs-function">            vector&lt;<span class="hljs-type">int</span>&gt;&amp; level, vector&lt;vector&lt;edge&gt;&gt;&amp; g)</span> </span>&#123;<br>    level.<span class="hljs-built_in">assign</span>(v_size, <span class="hljs-number">-1</span>);<br>    level[src] = <span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(src);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> u = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; e : g[u]) &#123;<br>            <span class="hljs-type">int</span> v = e.v, c = e.capacity, f = e.flow;<br>            <span class="hljs-keyword">if</span> (level[v] &lt; <span class="hljs-number">0</span> &amp;&amp; f &lt; c) &#123;<br>                level[v] = level[u] + <span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> level[dest] &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> dest, vector&lt;<span class="hljs-type">int</span>&gt;&amp; ptr, vector&lt;<span class="hljs-type">int</span>&gt;&amp; level, vector&lt;vector&lt;edge&gt;&gt;&amp; g)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == dest) <br>        <span class="hljs-keyword">return</span> INT_MAX / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// ptr 代表邻接边的索引</span><br>    <span class="hljs-keyword">while</span> (ptr[u] &lt; g[u].<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">auto</span>&amp; e = g[u][ptr[u]];<br>        <span class="hljs-type">int</span> v = e.v, c = e.capacity, f = e.flow;<br>        <span class="hljs-keyword">if</span> (level[v] == level[u] + <span class="hljs-number">1</span> &amp;&amp; f &lt; c) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;u-&gt;v:&quot;</span> &lt;&lt; u &lt;&lt; <span class="hljs-string">&quot;-&gt;&quot;</span> &lt;&lt; v &lt;&lt; endl; <br>            <span class="hljs-type">int</span> min_capacity = <span class="hljs-built_in">min</span>(e.capacity - f, <span class="hljs-built_in">dfs</span>(v, dest, ptr, level, g));<br>            cout &lt;&lt; <span class="hljs-string">&quot;expand capacity: &quot;</span> &lt;&lt; min_capacity &lt;&lt; endl;<br>            <span class="hljs-keyword">if</span> (min_capacity &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 正向边增加</span><br>                e.flow += min_capacity;<br>                <span class="hljs-comment">// 针对反向边的操作</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; ve : g[v]) &#123;<br>                    <span class="hljs-keyword">if</span> (ve.v == u) &#123;<br>                        <span class="hljs-comment">// 反向边减少</span><br>                        ve.flow -= min_capacity; <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> min_capacity;<br>            &#125;<br>        &#125;<br>        ptr[u] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">(vector&lt;vector&lt;edge&gt;&gt;&amp; g, <span class="hljs-type">int</span> src, <span class="hljs-type">int</span> dest, <span class="hljs-type">int</span> v_size)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (src == dest) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max_flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">level</span><span class="hljs-params">(v_size, <span class="hljs-number">-1</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>(src, dest, v_size, level, g)) &#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(v_size, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> flow = <span class="hljs-built_in">dfs</span>(src, dest, ptr, level, g);<br>            <span class="hljs-keyword">if</span> (flow &lt;= <span class="hljs-number">0</span>) <br>                <span class="hljs-keyword">break</span>;<br>            max_flow += flow;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max_flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">rwFile</span>();<br>    cin &gt;&gt; N &gt;&gt; M &gt;&gt; S &gt;&gt; T;<br>    vector&lt;vector&lt;edge&gt;&gt; <span class="hljs-built_in">g</span>(N + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, capacity;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; capacity;<br>        g[u].<span class="hljs-built_in">emplace_back</span>(edge&#123;v, capacity, <span class="hljs-number">0</span>&#125;);<br>        g[v].<span class="hljs-built_in">emplace_back</span>(edge&#123;u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">dinic</span>(g, S, T, N);<br>    cout &lt;&lt; <span class="hljs-string">&quot;max_flow&quot;</span> &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>网络最大流</tag>
      
      <tag>Dinic Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog_of_my_teach</title>
    <link href="/2023/10/08/blog-of-my-teach/"/>
    <url>/2023/10/08/blog-of-my-teach/</url>
    
    <content type="html"><![CDATA[<p>md， 导师不会把话说明白吗，我真的服了，nmmd，叫我过去汇报直接给我骂1个半小时<br>我谢谢你，半个小时能说清楚的事情，一定要得劲暗示，直说不就完事，本来现在好歹还是可以共赢的情况，<br>非得给我整些幺蛾子，我谢谢你。</p>]]></content>
    
    
    <categories>
      
      <category>读研的碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emo</tag>
      
      <tag>thesis</tag>
      
      <tag>teacher</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thesis_thinking_lab_10_7</title>
    <link href="/2023/10/07/thesis-thinking-lab-10-7/"/>
    <url>/2023/10/07/thesis-thinking-lab-10-7/</url>
    
    <content type="html"><![CDATA[<h1 id="how-to-update-the-population"><a href="#how-to-update-the-population" class="headerlink" title="how to update the population"></a>how to update the population</h1><h2 id="add-policy"><a href="#add-policy" class="headerlink" title="add policy"></a>add policy</h2><p>采用Add策略更新种群时，将候选种群中与所有其他个体差异最大的个体一一添加到新种群中。<br>更具体地，当前种群currentpop和遗传操作生成的子种群childpop一起被视为候选种群candidatepop。<br>从candidatepop中随机选择第一个个体插入新种群newpop，然后根据式（10）计算candidatepop中每个剩余个体与newpop中所有个体的不相似度。<br>根据candidatepop中每个个体的相异度，从candidatepop中选择相异值最大的个体加入newpop。重复上述过程，直到newpop中的个体数量达到预设的种群规模。更新种群的Add策略的伪代码如算法3所示。</p><p><strong>Fitness($Ind_i$) &#x3D; MAX(n)(j &#x3D; 1) (D($Ind_i$,$Ind_j$))</strong></p><p>candidatepop &#x3D; $currentpop \cup  childpop$<br><strong>newpop is empty</strong><br>从待选择的种群中选择索引<br>Index &#x3D; random_select(candidatepop)<br>将新个体加入新种群<br>newpop &#x3D; newpop.emplace_back(Index_people)<br>移除选中个体在待选种群中<br>cnadidatepop -&#x3D; Index<br>while (1)<br>for each Index in candidatepop<br><strong>用所有候选者和新生成种群计算差异, 并记录差异最大的那个候选者</strong><br>然后移除这个最大的候选者从候选种群里<br>并加入新种群重复上述操作直到生成原始种群</p><h2 id="delete-policy"><a href="#delete-policy" class="headerlink" title="delete policy"></a>delete policy</h2><p>candidatepop &#x3D; $ currentpop \cup childpop $<br>两两组合candidatepop，这些组合会形成很多的Diversity（Ind_i, Ind_j）<br>寻找这些值的最小值<br>原文中Cov(MinIndPair_i)没看懂不管他</p><p>candidatepop &#x3D; candidatepop - DelIndex<br>update上述组合Matrix<br>直到candidatepop 和当前种群大小一致<br>就生成了新的种群</p>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
      <tag>GA Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thesis_thinking/2023/10/7</title>
    <link href="/2023/10/07/2023-thesis-thinking-2023-10-7/"/>
    <url>/2023/10/07/2023-thesis-thinking-2023-10-7/</url>
    
    <content type="html"><![CDATA[<h1 id="实验的总体设计思路"><a href="#实验的总体设计思路" class="headerlink" title="实验的总体设计思路"></a>实验的总体设计思路</h1><p>在Diversity-Oriented Test Suite Generation for EFSM Model这篇论文中他采用了GA算法，当然是修改版本的<br>他主要考虑了以下几点创新，同时为了体现它的工作量： </p><ol><li><p>他在覆盖范围这一条件的基础上考虑了生成测试样例的多样性，（<strong>同时它的GA algorithm的fitness函数也是基于此的<br>如下图展示是Diversity的具体计算</strong>）</p><p><img src="/..%5Cthesis-thinking-2023-10-7/xx.png" alt="fitness function"></p><p>如下图展示是fitness的具体计算</p><p><img src="/..%5Cthesis-thinking-2023-10-7/yy.png" alt="fitness function2"></p></li><li><p>他的GA Algorithm本质上就是在update population上做了一些改动, 比如增加个体和删除个体策略这些…</p></li><li><p>他检测它的路径是否可靠是通过它的数据生成器来决定的（其实本质上它的遗传算法不在意生成的路径是否可行，就是保证多样性和覆盖范围就行），不能生成对应测试数据的一定不可行</p></li><li><p>它的评估标准因此也和他的多样性有关，而和是否一定可生成无关了</p></li><li><p>那么他有什么缺点呢？</p></li></ol><p>我们的复现也要去针对他的缺点。他的模型有很多新的模型，<strong>Cruise Control是2016年LinkedIn开源的Kafka集群管理基于EFSM模型设计的，所以Cruise Control应该加入我们的模型测试里面</strong><br>同时他也有很多模型没去跑，那这就是我们可以发挥的空间，利用他的方法跑我们的模型，看看能不能生成可执行路径，且不要太长。<br>因为我们的研究主要需求是：<strong>生成的测试路径不要太长，且要可执行</strong>因为每个转换都意味着生产成本。<br>同时我们公共了一个模型ATM，这个简单且常见普通，作为一个基本测试目标就行。</p><h2 id="实验的复现方案"><a href="#实验的复现方案" class="headerlink" title="实验的复现方案"></a>实验的复现方案</h2><p>但是如何复现实验呢？</p><ol><li>因为我们基于PBACE的环境，我们可以实时的判断转换的可行性，所以我们不必彻底遵循他论文原有思路，反正他也不知道</li><li>我们开始随机生成路径种群时，利用dfs回溯先把所有路径搜索出来（<strong>搜索路径以覆盖准则为标准</strong>），然后把可行的路径推入种群（<strong>可能会很耗时</strong>）</li><li>复现他实现的GA算法做测试,由于他这边选的变迁都是一定可执行才去选择的，所以输入数据那边全都满足变迁要求即可。</li><li>GA Algorithm的Fitness function就按照他论文的要求去做就行，不必再额外操作了。（当然他的算法稍微有点奇怪的地方忽略就行）</li><li>我们的创新点就在于尽可能趋近于百分百生成测试数据, 同时给出了一种判断路径可执行性的方法.</li></ol>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
      <tag>the lab thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thesis/2023927</title>
    <link href="/2023/09/27/2023-thesis-2023927/"/>
    <url>/2023/09/27/2023-thesis-2023927/</url>
    
    <content type="html"><![CDATA[<h1 id="要基于大佬的论文上做改动"><a href="#要基于大佬的论文上做改动" class="headerlink" title="要基于大佬的论文上做改动"></a>要基于大佬的论文上做改动</h1><h2 id="how-to-write-abstract"><a href="#how-to-write-abstract" class="headerlink" title="how to write abstract"></a>how to write abstract</h2><p><strong>提出新的想法，提出当前解决方案的问题</strong><br><strong>讲明当前情况</strong></p><h2 id="how-to-write-introduction"><a href="#how-to-write-introduction" class="headerlink" title="how to write introduction"></a>how to write introduction</h2><p><strong>背景</strong>，<strong>现有方法存在的问题1个</strong>，<strong>针对提出的问题给出的新的解决方案</strong><br>该篇文章设定的解决问题的条件, 以及要解决的问题（1个）且一个面<br>当时的方法有啥局限, 哪里可以有提升<br>提出我们有的，他没有的方面，不评价他好的部分，提出他有限制的部分</p>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>master_record/2023927</title>
    <link href="/2023/09/27/2023-master-record-2023927/"/>
    <url>/2023/09/27/2023-master-record-2023927/</url>
    
    <content type="html"><![CDATA[<p>正经做点事还得挨骂, 有些时候导师是真不当人啊。<br>果然读研的时候还是得先学会做人，和隐藏实力，不然被导师pua也是真难受</p>]]></content>
    
    
    <categories>
      
      <category>读研的碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql_lean_926</title>
    <link href="/2023/09/26/2023-sql-lean-926/"/>
    <url>/2023/09/26/2023-sql-lean-926/</url>
    
    <content type="html"><![CDATA[<h2 id="通配符-in-sql"><a href="#通配符-in-sql" class="headerlink" title="通配符 in sql"></a>通配符 in sql</h2><p>all of sql follow this is writing in mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>通配符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tarjan.md</title>
    <link href="/2023/09/26/2023-tarjan-md/"/>
    <url>/2023/09/26/2023-tarjan-md/</url>
    
    <content type="html"><![CDATA[<h2 id="use-tarjan-to-cal-割点"><a href="#use-tarjan-to-cal-割点" class="headerlink" title="use tarjan to cal 割点"></a>use tarjan to cal 割点</h2><p><strong>lc上存在类似题目</strong><br><strong><a href="https://leetcode.cn/problems/critical-connections-in-a-network/">https://leetcode.cn/problems/critical-connections-in-a-network/</a></strong></p><p>按深度优先顺序遍历所有结点，给每个结点编号为now。</p><p>对于当前结点u，其子树的能到达的最小编号，结点u肯定也能到达。即<br>low[u] &#x3D; min(low[u], low[v])</p><p>对于当前结点u，如果其能直接访问到之前遍历过的结点，<br>这个遍历过的结点就有可能是当前结点u能到达的最小编号。即<br>low[u] &#x3D; min(low[u], dfn[v])</p><p>对于当前结点u到结点v这条边，如果从结点v继续遍历后，结点v不能到达比结点u编号更小的结点，<br>则这u-&gt;v这条边就是桥了，也就是说，除了从u走到v这条边，<br>从节点v开始走，永远走不到u和u之前走过的点了。即if(low[v] &gt; dfn[u]) ans.push_back({u,v})</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Tuple</span><br> <br> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Trajan算法求无向图的桥</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tarjan</span>:<br>    <span class="hljs-comment"># 求无向连通图的桥</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCuttingPointAndCuttingEdge</span>(<span class="hljs-params">edges: <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>]</span>):<br>        link, dfn, low = &#123;&#125;, &#123;&#125;, &#123;&#125;<span class="hljs-comment"># link为字典邻接表</span><br>        global_time = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> edges:<br>            <span class="hljs-keyword">if</span> a <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> link:<br>                link[a] = []<br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> link:<br>                link[b] = []<br>            link[a].append(b)<span class="hljs-comment">#无向图</span><br>            link[b].append(a)<span class="hljs-comment">#无向图</span><br>            dfn[a], dfn[b] = <span class="hljs-number">0x7fffffff</span>, <span class="hljs-number">0x7fffffff</span><br>            low[a], low[b] = <span class="hljs-number">0x7fffffff</span>, <span class="hljs-number">0x7fffffff</span><br> <br> <br>        cutting_points, cutting_edges = [], []<br> <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">cur, prev, root</span>):<br>            global_time[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># dfn 只有当前时间戳可以更新</span><br>            <span class="hljs-comment"># low 记录的是可以到达的祖先节点的更小的时间戳(前提是可以通过非搜索树的路径)</span><br>            dfn[cur], low[cur] = global_time[<span class="hljs-number">0</span>], global_time[<span class="hljs-number">0</span>]<br> <br>            children_cnt = <span class="hljs-number">0</span><br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">in</span> link[cur]:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span> != prev:<br>                    <span class="hljs-comment"># 未访问过先访问他</span><br>                    <span class="hljs-keyword">if</span> dfn[<span class="hljs-built_in">next</span>] == <span class="hljs-number">0x7fffffff</span>:<br>                        <span class="hljs-comment"># 记录儿子节点数量</span><br>                        children_cnt += <span class="hljs-number">1</span><br>                        <span class="hljs-comment"># 先把dfn 数组填满</span><br>                        dfs(<span class="hljs-built_in">next</span>, cur, root)<br>                        <span class="hljs-comment"># 不是根且无法跨越他回到祖先</span><br>                        <span class="hljs-keyword">if</span> cur != root <span class="hljs-keyword">and</span> low[<span class="hljs-built_in">next</span>] &gt;= dfn[cur]:<br>                            flag = <span class="hljs-literal">True</span><br>                        <span class="hljs-comment"># 儿子可以到达的, 父亲一定可以到达</span><br>                        low[cur] = <span class="hljs-built_in">min</span>(low[cur], low[<span class="hljs-built_in">next</span>])<br>                        <span class="hljs-comment"># 是否是割边</span><br>                        <span class="hljs-keyword">if</span> low[<span class="hljs-built_in">next</span>] &gt; dfn[cur]:<br>                            cutting_edges.append([cur, <span class="hljs-built_in">next</span>] <span class="hljs-keyword">if</span> cur &lt; <span class="hljs-built_in">next</span> <span class="hljs-keyword">else</span> [<span class="hljs-built_in">next</span>, cur])<br>                    <span class="hljs-keyword">else</span>:<br>                        low[cur] = <span class="hljs-built_in">min</span>(low[cur], dfn[<span class="hljs-built_in">next</span>])<br>            <span class="hljs-comment"># 如果是根节点, 只需要有2棵子树就说明去掉他图不连通</span><br>            <span class="hljs-comment"># 否则: flag == True</span><br>            <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">or</span> (cur == root <span class="hljs-keyword">and</span> children_cnt &gt;= <span class="hljs-number">2</span>):<br>                cutting_points.append(cur)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;points: &quot;</span>, cutting_points)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;edges: &quot;</span>, cutting_edges)<br> <br>        dfs(edges[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-literal">None</span>, edges[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> cutting_points, cutting_edges<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">criticalConnections</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, connections: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        edges = [(a, b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> connections]<br>        cutting_dots, cutting_edges = Tarjan.getCuttingPointAndCuttingEdge(edges)<br>        <span class="hljs-keyword">return</span> [[a, b] <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> cutting_edges]<br> <br> <br>connections = [[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]]<br>n = <span class="hljs-number">4</span><br>s = Solution()<br>result = s.criticalConnections(n,connections)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>graph</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>where_having_diff.md</title>
    <link href="/2023/09/26/2023-where-having-diff-md/"/>
    <url>/2023/09/26/2023-where-having-diff-md/</url>
    
    <content type="html"><![CDATA[<h2 id="where-and-having-difference"><a href="#where-and-having-difference" class="headerlink" title="where and having difference"></a>where and having difference</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在查询sql的过程中, <br>可以先考虑过滤行, <br>在分组进行过滤,<br>而如果有联结的情况, 先根据联结条件, 将几个表列组合起来<br>如果没有联结条件, A表m行, B表n行, 总共生成m<span class="hljs-emphasis">*n行内容</span><br></code></pre></td></tr></table></figure><p><strong>having where diff</strong><br>除了能用GROUP BY分组数据外，MySQL还允许过滤分组，规定包括哪些分组，排除哪些分组。例如，可能想要列出至少有两个订单的所有顾客。为得出这种数据，必须基于完整的分组而不是个别的行进行过滤。</p><p>我们已经看到了WHERE子句的作用（第6章中引入）。但是，在这个例子中WHERE不能完成任务，因为WHERE过滤指定的是行而不是分组。事实上，WHERE没有分组的概念。</p><p>那么，不使用WHERE使用什么呢？MySQL为此目的提供了另外的子句，那就是HAVING子句。HAVING非常类似于WHERE。事实上，目前为止所学过的所有类型的WHERE子句都可以用HAVING来替代。唯一的差别是WHERE过滤行，而HAVING过滤分组。</p><p><strong>where用于过滤行</strong><br><strong>having用于过滤分组</strong></p><p>example code:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br><span class="hljs-operator">|</span> vend_id <span class="hljs-operator">|</span> num_prods <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1001</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1002</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1003</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1005</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>the_method_use_hexo.md</title>
    <link href="/2023/09/26/the-method-use-hexo-md/"/>
    <url>/2023/09/26/the-method-use-hexo-md/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-use-hexo-to-generate-article"><a href="#How-to-use-hexo-to-generate-article" class="headerlink" title="How to use hexo to generate article"></a>How to use hexo to generate article</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">create a md document <span class="hljs-keyword">in</span> the _posts <span class="hljs-built_in">dir</span></span><br>hexo new post your_article_name.md<br><span class="hljs-meta prompt_"># </span><span class="language-bash">after you edit all the document</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">you need to generate the article html</span> <br>hexo g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>hexo generate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">use this order</span><br>hexo s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>hexo server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">start a <span class="hljs-built_in">local</span> server see the result</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deploy to the github</span><br>hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo_base_use</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>generate article</tag>
      
      <tag>deploy article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create_procedure</title>
    <link href="/2023/09/23/create-procedure/"/>
    <url>/2023/09/23/create-procedure/</url>
    
    <content type="html"><![CDATA[<h2 id="create-procedure"><a href="#create-procedure" class="headerlink" title="create_procedure"></a>create_procedure</h2><p>PS: <strong>由于mysql默认把; 作为语句结束符, 所以使用delimiter 语句来更改结束符</strong><br>example_code</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> productpricing(<span class="hljs-variable">@pricelow</span>,<br>                    <span class="hljs-variable">@pricehigh</span>,<br>                    <span class="hljs-variable">@priceaverage</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改结束符为;;</span><br>delimiter ;;<br><br><span class="hljs-comment">-- 中间是定义存储过程(view)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> productpricing()<br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">Avg</span>(prod_price) <span class="hljs-keyword">AS</span> priceaverage<br>   <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">END</span>;;<br><br><span class="hljs-comment">-- 恢复结束符为;</span><br>delimiter ;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--             taxable = 0 if not taxable, 1 if taxable</span><br><span class="hljs-comment">--             ototal = order total variable</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> ordertotal(<br>   <span class="hljs-keyword">IN</span> onumber <span class="hljs-type">INT</span>,<br>   <span class="hljs-keyword">IN</span> taxable <span class="hljs-type">BOOLEAN</span>,<br>   <span class="hljs-keyword">OUT</span> ototal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>) COMMENT <span class="hljs-string">&#x27;Obtain order total, optionally adding tax&#x27;</span><br><span class="hljs-keyword">BEGIN</span><br><br>   <span class="hljs-comment">-- Declare variable for total</span><br>   <span class="hljs-keyword">DECLARE</span> total <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-comment">-- Declare tax percentage</span><br>   <span class="hljs-keyword">DECLARE</span> taxrate <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">6</span>;<br><br>   <span class="hljs-comment">-- Get the order total</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">Sum</span>(item_price<span class="hljs-operator">*</span>quantity)<br>   <span class="hljs-keyword">FROM</span> orderitems<br>   <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-operator">=</span> onumber<br>   <span class="hljs-keyword">INTO</span> total;<br><br>   <span class="hljs-comment">-- Is this taxable?</span><br>   IF taxable <span class="hljs-keyword">THEN</span><br>      <span class="hljs-comment">-- Yes, so add taxrate to the total</span><br>      <span class="hljs-keyword">SELECT</span> total<span class="hljs-operator">+</span>(total<span class="hljs-operator">/</span><span class="hljs-number">100</span><span class="hljs-operator">*</span>taxrate) <span class="hljs-keyword">INTO</span> total;<br>   <span class="hljs-keyword">END</span> IF;<br><br>   <span class="hljs-comment">-- And finally, save to out variable</span><br>   <span class="hljs-keyword">SELECT</span> total <span class="hljs-keyword">INTO</span> ototal;<br><br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>分析</p><p>此存储过程有很大的变动。首先，增加了注释（前面放置–）。在存储过程复杂性增加时，这样做特别重要。添加了另外一个参数taxable，它是一个布尔值（如果要增加税则为真，否则为假）。在存储过程体中，用DECLARE语句定义了两个局部变量。DECLARE要求指定变量名和数据类型，它也支持可选的默认值（这个例子中的taxrate的默认被设置为6%）。SELECT语句已经改变，因此其结果存储到total（局部变量）而不是ototal。IF语句检查taxable是否为真，如果为真，则用另一SELECT语句增加营业税到局部变量total。最后，用另一SELECT语句将total（它增加或许不增加营业税）保存到ototal。</p><p><strong>COMMENT关键字 本例子中的存储过程在CREATE PROCEDURE语句中包含了一个COMMENT值。它不是必需的，但如果给出，将在SHOW PROCEDURE STATUS的结果中显示。</strong></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>procedure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cartesian_product</title>
    <link href="/2023/09/23/Cartesian-product/"/>
    <url>/2023/09/23/Cartesian-product/</url>
    
    <content type="html"><![CDATA[<p>如果表1有m行a列，表2有n行b列，<strong>两表无条件连接时会将两表里所有行两两组合到一起</strong>，<br>所形成的表就有m*n行，a+b列。如果表1或表2的记录数很多时，连接后会形成一张非常大的表，<br>在这种大表里查询效率特别低，所以在数据库查询时，应尽量避免笛卡尔积的出现。</p><p>首先问个问题，常见的左连接查询，是不是笛卡尔积。<br>换个方式问，左连接中以左表为准，左表有m条记录，连接后的结果集是不是一定能得到m条记录？<br>答案是不一定，也就是说，左连接查询可能会产生笛卡尔积。</p><p>先附上结论：<br>连接查询时，当连接on条件是非唯一字段时，会出现笛卡尔积(局部笛卡尔积)；<br>当连接on条件是唯一字段时，则不会出现笛卡尔积。</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Based by github and hexo to build the test blog</title>
    <link href="/2023/09/23/my-blog-build-remark/"/>
    <url>/2023/09/23/my-blog-build-remark/</url>
    
    <content type="html"><![CDATA[<img src="/2023/09/23/my-blog-build-remark/order_crossover.png" class="" title="the pif for test">]]></content>
    
    
    <categories>
      
      <category>tutorial for blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/23/hello-world/"/>
    <url>/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
