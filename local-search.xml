<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>thesis_thinking_lab_10_7</title>
    <link href="/2023/10/07/thesis-thinking-lab-10-7/"/>
    <url>/2023/10/07/thesis-thinking-lab-10-7/</url>
    
    <content type="html"><![CDATA[<h1 id="how-to-update-the-population"><a href="#how-to-update-the-population" class="headerlink" title="how to update the population"></a>how to update the population</h1><h2 id="add-policy"><a href="#add-policy" class="headerlink" title="add policy"></a>add policy</h2><p>采用Add策略更新种群时，将候选种群中与所有其他个体差异最大的个体一一添加到新种群中。<br>更具体地，当前种群currentpop和遗传操作生成的子种群childpop一起被视为候选种群candidatepop。<br>从candidatepop中随机选择第一个个体插入新种群newpop，然后根据式（10）计算candidatepop中每个剩余个体与newpop中所有个体的不相似度。<br>根据candidatepop中每个个体的相异度，从candidatepop中选择相异值最大的个体加入newpop。重复上述过程，直到newpop中的个体数量达到预设的种群规模。更新种群的Add策略的伪代码如算法3所示。</p><p><strong>Fitness($Ind_i$) &#x3D; MAX(n)(j &#x3D; 1) (D($Ind_i$,$Ind_j$))</strong></p><p>candidatepop &#x3D; $currentpop \cup  childpop$<br><strong>newpop is empty</strong><br>从待选择的种群中选择索引<br>Index &#x3D; random_select(candidatepop)<br>将新个体加入新种群<br>newpop &#x3D; newpop.emplace_back(Index_people)<br>移除选中个体在待选种群中<br>cnadidatepop -&#x3D; Index<br>while (1)<br>for each Index in candidatepop<br><strong>用所有候选者和新生成种群计算差异, 并记录差异最大的那个候选者</strong><br>然后移除这个最大的候选者从候选种群里<br>并加入新种群重复上述操作直到生成原始种群</p><h2 id="delete-policy"><a href="#delete-policy" class="headerlink" title="delete policy"></a>delete policy</h2><p>candidatepop &#x3D; $ currentpop \cup childpop $<br>两两组合candidatepop，这些组合会形成很多的Diversity（Ind_i, Ind_j）<br>寻找这些值的最小值<br>原文中Cov(MinIndPair_i)没看懂不管他</p><p>candidatepop &#x3D; candidatepop - DelIndex<br>update上述组合Matrix<br>直到candidatepop 和当前种群大小一致<br>就生成了新的种群</p>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
      <tag>GA Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thesis_thinking/2023/10/7</title>
    <link href="/2023/10/07/2023-thesis-thinking-2023-10-7/"/>
    <url>/2023/10/07/2023-thesis-thinking-2023-10-7/</url>
    
    <content type="html"><![CDATA[<h1 id="实验的总体设计思路"><a href="#实验的总体设计思路" class="headerlink" title="实验的总体设计思路"></a>实验的总体设计思路</h1><p>在Diversity-Oriented Test Suite Generation for EFSM Model这篇论文中他采用了GA算法，当然是修改版本的<br>他主要考虑了以下几点创新，同时为了体现它的工作量： </p><ol><li><p>他在覆盖范围这一条件的基础上考虑了生成测试样例的多样性，（<strong>同时它的GA algorithm的fitness函数也是基于此的<br>如下图展示是Diversity的具体计算</strong>）</p><p><img src="/..%5Cthesis-thinking-2023-10-7/xx.png" alt="fitness function"></p><p>如下图展示是fitness的具体计算</p><p><img src="/..%5Cthesis-thinking-2023-10-7/yy.png" alt="fitness function2"></p></li><li><p>他的GA Algorithm本质上就是在update population上做了一些改动, 比如增加个体和删除个体策略这些…</p></li><li><p>他检测它的路径是否可靠是通过它的数据生成器来决定的（其实本质上它的遗传算法不在意生成的路径是否可行，就是保证多样性和覆盖范围就行），不能生成对应测试数据的一定不可行</p></li><li><p>它的评估标准因此也和他的多样性有关，而和是否一定可生成无关了</p></li><li><p>那么他有什么缺点呢？</p></li></ol><p>我们的复现也要去针对他的缺点。他的模型有很多新的模型，<strong>Cruise Control是2016年LinkedIn开源的Kafka集群管理基于EFSM模型设计的，所以Cruise Control应该加入我们的模型测试里面</strong><br>同时他也有很多模型没去跑，那这就是我们可以发挥的空间，利用他的方法跑我们的模型，看看能不能生成可执行路径，且不要太长。<br>因为我们的研究主要需求是：<strong>生成的测试路径不要太长，且要可执行</strong>因为每个转换都意味着生产成本。<br>同时我们公共了一个模型ATM，这个简单且常见普通，作为一个基本测试目标就行。</p><h2 id="实验的复现方案"><a href="#实验的复现方案" class="headerlink" title="实验的复现方案"></a>实验的复现方案</h2><p>但是如何复现实验呢？</p><ol><li>因为我们基于PBACE的环境，我们可以实时的判断转换的可行性，所以我们不必彻底遵循他论文原有思路，反正他也不知道</li><li>我们开始随机生成路径种群时，利用dfs回溯先把所有路径搜索出来（<strong>搜索路径以覆盖准则为标准</strong>），然后把可行的路径推入种群（<strong>可能会很耗时</strong>）</li><li>复现他实现的GA算法做测试,由于他这边选的变迁都是一定可执行才去选择的，所以输入数据那边全都满足变迁要求即可。</li><li>GA Algorithm的Fitness function就按照他论文的要求去做就行，不必再额外操作了。（当然他的算法稍微有点奇怪的地方忽略就行）</li><li>我们的创新点就在于尽可能趋近于百分百生成测试数据, 同时给出了一种判断路径可执行性的方法.</li></ol>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
      <tag>the lab thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thesis/2023927</title>
    <link href="/2023/09/27/2023-thesis-2023927/"/>
    <url>/2023/09/27/2023-thesis-2023927/</url>
    
    <content type="html"><![CDATA[<h1 id="要基于大佬的论文上做改动"><a href="#要基于大佬的论文上做改动" class="headerlink" title="要基于大佬的论文上做改动"></a>要基于大佬的论文上做改动</h1><h2 id="how-to-write-abstract"><a href="#how-to-write-abstract" class="headerlink" title="how to write abstract"></a>how to write abstract</h2><p><strong>提出新的想法，提出当前解决方案的问题</strong><br><strong>讲明当前情况</strong></p><h2 id="how-to-write-introduction"><a href="#how-to-write-introduction" class="headerlink" title="how to write introduction"></a>how to write introduction</h2><p><strong>背景</strong>，<strong>现有方法存在的问题1个</strong>，<strong>针对提出的问题给出的新的解决方案</strong><br>该篇文章设定的解决问题的条件, 以及要解决的问题（1个）且一个面<br>当时的方法有啥局限, 哪里可以有提升<br>提出我们有的，他没有的方面，不评价他好的部分，提出他有限制的部分</p>]]></content>
    
    
    <categories>
      
      <category>thesis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thesis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>master_record/2023927</title>
    <link href="/2023/09/27/2023-master-record-2023927/"/>
    <url>/2023/09/27/2023-master-record-2023927/</url>
    
    <content type="html"><![CDATA[<p>正经做点事还得挨骂, 有些时候导师是真不当人啊。<br>果然读研的时候还是得先学会做人，和隐藏实力，不然被导师pua也是真难受</p>]]></content>
    
    
    <categories>
      
      <category>读研的碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>emo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql_lean_926</title>
    <link href="/2023/09/26/2023-sql-lean-926/"/>
    <url>/2023/09/26/2023-sql-lean-926/</url>
    
    <content type="html"><![CDATA[<h2 id="通配符-in-sql"><a href="#通配符-in-sql" class="headerlink" title="通配符 in sql"></a>通配符 in sql</h2><p>all of sql follow this is writing in mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>通配符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tarjan.md</title>
    <link href="/2023/09/26/2023-tarjan-md/"/>
    <url>/2023/09/26/2023-tarjan-md/</url>
    
    <content type="html"><![CDATA[<h2 id="use-tarjan-to-cal-割点"><a href="#use-tarjan-to-cal-割点" class="headerlink" title="use tarjan to cal 割点"></a>use tarjan to cal 割点</h2><p><strong>lc上存在类似题目</strong><br><strong><a href="https://leetcode.cn/problems/critical-connections-in-a-network/">https://leetcode.cn/problems/critical-connections-in-a-network/</a></strong></p><p>按深度优先顺序遍历所有结点，给每个结点编号为now。</p><p>对于当前结点u，其子树的能到达的最小编号，结点u肯定也能到达。即<br>low[u] &#x3D; min(low[u], low[v])</p><p>对于当前结点u，如果其能直接访问到之前遍历过的结点，<br>这个遍历过的结点就有可能是当前结点u能到达的最小编号。即<br>low[u] &#x3D; min(low[u], dfn[v])</p><p>对于当前结点u到结点v这条边，如果从结点v继续遍历后，结点v不能到达比结点u编号更小的结点，<br>则这u-&gt;v这条边就是桥了，也就是说，除了从u走到v这条边，<br>从节点v开始走，永远走不到u和u之前走过的点了。即if(low[v] &gt; dfn[u]) ans.push_back({u,v})</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Tuple</span><br> <br> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Trajan算法求无向图的桥</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tarjan</span>:<br>    <span class="hljs-comment"># 求无向连通图的桥</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getCuttingPointAndCuttingEdge</span>(<span class="hljs-params">edges: <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>]</span>):<br>        link, dfn, low = &#123;&#125;, &#123;&#125;, &#123;&#125;<span class="hljs-comment"># link为字典邻接表</span><br>        global_time = [<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> edges:<br>            <span class="hljs-keyword">if</span> a <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> link:<br>                link[a] = []<br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> link:<br>                link[b] = []<br>            link[a].append(b)<span class="hljs-comment">#无向图</span><br>            link[b].append(a)<span class="hljs-comment">#无向图</span><br>            dfn[a], dfn[b] = <span class="hljs-number">0x7fffffff</span>, <span class="hljs-number">0x7fffffff</span><br>            low[a], low[b] = <span class="hljs-number">0x7fffffff</span>, <span class="hljs-number">0x7fffffff</span><br> <br> <br>        cutting_points, cutting_edges = [], []<br> <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">cur, prev, root</span>):<br>            global_time[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># dfn 只有当前时间戳可以更新</span><br>            <span class="hljs-comment"># low 记录的是可以到达的祖先节点的更小的时间戳(前提是可以通过非搜索树的路径)</span><br>            dfn[cur], low[cur] = global_time[<span class="hljs-number">0</span>], global_time[<span class="hljs-number">0</span>]<br> <br>            children_cnt = <span class="hljs-number">0</span><br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">in</span> link[cur]:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span> != prev:<br>                    <span class="hljs-comment"># 未访问过先访问他</span><br>                    <span class="hljs-keyword">if</span> dfn[<span class="hljs-built_in">next</span>] == <span class="hljs-number">0x7fffffff</span>:<br>                        <span class="hljs-comment"># 记录儿子节点数量</span><br>                        children_cnt += <span class="hljs-number">1</span><br>                        <span class="hljs-comment"># 先把dfn 数组填满</span><br>                        dfs(<span class="hljs-built_in">next</span>, cur, root)<br>                        <span class="hljs-comment"># 不是根且无法跨越他回到祖先</span><br>                        <span class="hljs-keyword">if</span> cur != root <span class="hljs-keyword">and</span> low[<span class="hljs-built_in">next</span>] &gt;= dfn[cur]:<br>                            flag = <span class="hljs-literal">True</span><br>                        <span class="hljs-comment"># 儿子可以到达的, 父亲一定可以到达</span><br>                        low[cur] = <span class="hljs-built_in">min</span>(low[cur], low[<span class="hljs-built_in">next</span>])<br>                        <span class="hljs-comment"># 是否是割边</span><br>                        <span class="hljs-keyword">if</span> low[<span class="hljs-built_in">next</span>] &gt; dfn[cur]:<br>                            cutting_edges.append([cur, <span class="hljs-built_in">next</span>] <span class="hljs-keyword">if</span> cur &lt; <span class="hljs-built_in">next</span> <span class="hljs-keyword">else</span> [<span class="hljs-built_in">next</span>, cur])<br>                    <span class="hljs-keyword">else</span>:<br>                        low[cur] = <span class="hljs-built_in">min</span>(low[cur], dfn[<span class="hljs-built_in">next</span>])<br>            <span class="hljs-comment"># 如果是根节点, 只需要有2棵子树就说明去掉他图不连通</span><br>            <span class="hljs-comment"># 否则: flag == True</span><br>            <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">or</span> (cur == root <span class="hljs-keyword">and</span> children_cnt &gt;= <span class="hljs-number">2</span>):<br>                cutting_points.append(cur)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;points: &quot;</span>, cutting_points)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;edges: &quot;</span>, cutting_edges)<br> <br>        dfs(edges[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-literal">None</span>, edges[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span> cutting_points, cutting_edges<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">criticalConnections</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, connections: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        edges = [(a, b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> connections]<br>        cutting_dots, cutting_edges = Tarjan.getCuttingPointAndCuttingEdge(edges)<br>        <span class="hljs-keyword">return</span> [[a, b] <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> cutting_edges]<br> <br> <br>connections = [[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]]<br>n = <span class="hljs-number">4</span><br>s = Solution()<br>result = s.criticalConnections(n,connections)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>graph</tag>
      
      <tag>tarjan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>where_having_diff.md</title>
    <link href="/2023/09/26/2023-where-having-diff-md/"/>
    <url>/2023/09/26/2023-where-having-diff-md/</url>
    
    <content type="html"><![CDATA[<h2 id="where-and-having-difference"><a href="#where-and-having-difference" class="headerlink" title="where and having difference"></a>where and having difference</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在查询sql的过程中, <br>可以先考虑过滤行, <br>在分组进行过滤,<br>而如果有联结的情况, 先根据联结条件, 将几个表列组合起来<br>如果没有联结条件, A表m行, B表n行, 总共生成m<span class="hljs-emphasis">*n行内容</span><br></code></pre></td></tr></table></figure><p><strong>having where diff</strong><br>除了能用GROUP BY分组数据外，MySQL还允许过滤分组，规定包括哪些分组，排除哪些分组。例如，可能想要列出至少有两个订单的所有顾客。为得出这种数据，必须基于完整的分组而不是个别的行进行过滤。</p><p>我们已经看到了WHERE子句的作用（第6章中引入）。但是，在这个例子中WHERE不能完成任务，因为WHERE过滤指定的是行而不是分组。事实上，WHERE没有分组的概念。</p><p>那么，不使用WHERE使用什么呢？MySQL为此目的提供了另外的子句，那就是HAVING子句。HAVING非常类似于WHERE。事实上，目前为止所学过的所有类型的WHERE子句都可以用HAVING来替代。唯一的差别是WHERE过滤行，而HAVING过滤分组。</p><p><strong>where用于过滤行</strong><br><strong>having用于过滤分组</strong></p><p>example code:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br><span class="hljs-operator">|</span> vend_id <span class="hljs-operator">|</span> num_prods <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1001</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1002</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1003</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1005</span> <span class="hljs-operator">|</span>         <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+-----------+</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>the_method_use_hexo.md</title>
    <link href="/2023/09/26/the-method-use-hexo-md/"/>
    <url>/2023/09/26/the-method-use-hexo-md/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-use-hexo-to-generate-article"><a href="#How-to-use-hexo-to-generate-article" class="headerlink" title="How to use hexo to generate article"></a>How to use hexo to generate article</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">create a md document <span class="hljs-keyword">in</span> the _posts <span class="hljs-built_in">dir</span></span><br>hexo new post your_article_name.md<br><span class="hljs-meta prompt_"># </span><span class="language-bash">after you edit all the document</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">you need to generate the article html</span> <br>hexo g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>hexo generate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">use this order</span><br>hexo s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>hexo server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">start a <span class="hljs-built_in">local</span> server see the result</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">deploy to the github</span><br>hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo_base_use</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>generate article</tag>
      
      <tag>deploy article</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create_procedure</title>
    <link href="/2023/09/23/create-procedure/"/>
    <url>/2023/09/23/create-procedure/</url>
    
    <content type="html"><![CDATA[<h2 id="create-procedure"><a href="#create-procedure" class="headerlink" title="create_procedure"></a>create_procedure</h2><p>PS: <strong>由于mysql默认把; 作为语句结束符, 所以使用delimiter 语句来更改结束符</strong><br>example_code</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CALL</span> productpricing(<span class="hljs-variable">@pricelow</span>,<br>                    <span class="hljs-variable">@pricehigh</span>,<br>                    <span class="hljs-variable">@priceaverage</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改结束符为;;</span><br>delimiter ;;<br><br><span class="hljs-comment">-- 中间是定义存储过程(view)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> productpricing()<br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">Avg</span>(prod_price) <span class="hljs-keyword">AS</span> priceaverage<br>   <span class="hljs-keyword">FROM</span> products;<br><span class="hljs-keyword">END</span>;;<br><br><span class="hljs-comment">-- 恢复结束符为;</span><br>delimiter ;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--             taxable = 0 if not taxable, 1 if taxable</span><br><span class="hljs-comment">--             ototal = order total variable</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> ordertotal(<br>   <span class="hljs-keyword">IN</span> onumber <span class="hljs-type">INT</span>,<br>   <span class="hljs-keyword">IN</span> taxable <span class="hljs-type">BOOLEAN</span>,<br>   <span class="hljs-keyword">OUT</span> ototal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br>) COMMENT <span class="hljs-string">&#x27;Obtain order total, optionally adding tax&#x27;</span><br><span class="hljs-keyword">BEGIN</span><br><br>   <span class="hljs-comment">-- Declare variable for total</span><br>   <span class="hljs-keyword">DECLARE</span> total <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-comment">-- Declare tax percentage</span><br>   <span class="hljs-keyword">DECLARE</span> taxrate <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">6</span>;<br><br>   <span class="hljs-comment">-- Get the order total</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">Sum</span>(item_price<span class="hljs-operator">*</span>quantity)<br>   <span class="hljs-keyword">FROM</span> orderitems<br>   <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-operator">=</span> onumber<br>   <span class="hljs-keyword">INTO</span> total;<br><br>   <span class="hljs-comment">-- Is this taxable?</span><br>   IF taxable <span class="hljs-keyword">THEN</span><br>      <span class="hljs-comment">-- Yes, so add taxrate to the total</span><br>      <span class="hljs-keyword">SELECT</span> total<span class="hljs-operator">+</span>(total<span class="hljs-operator">/</span><span class="hljs-number">100</span><span class="hljs-operator">*</span>taxrate) <span class="hljs-keyword">INTO</span> total;<br>   <span class="hljs-keyword">END</span> IF;<br><br>   <span class="hljs-comment">-- And finally, save to out variable</span><br>   <span class="hljs-keyword">SELECT</span> total <span class="hljs-keyword">INTO</span> ototal;<br><br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>分析</p><p>此存储过程有很大的变动。首先，增加了注释（前面放置–）。在存储过程复杂性增加时，这样做特别重要。添加了另外一个参数taxable，它是一个布尔值（如果要增加税则为真，否则为假）。在存储过程体中，用DECLARE语句定义了两个局部变量。DECLARE要求指定变量名和数据类型，它也支持可选的默认值（这个例子中的taxrate的默认被设置为6%）。SELECT语句已经改变，因此其结果存储到total（局部变量）而不是ototal。IF语句检查taxable是否为真，如果为真，则用另一SELECT语句增加营业税到局部变量total。最后，用另一SELECT语句将total（它增加或许不增加营业税）保存到ototal。</p><p><strong>COMMENT关键字 本例子中的存储过程在CREATE PROCEDURE语句中包含了一个COMMENT值。它不是必需的，但如果给出，将在SHOW PROCEDURE STATUS的结果中显示。</strong></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>procedure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cartesian_product</title>
    <link href="/2023/09/23/Cartesian-product/"/>
    <url>/2023/09/23/Cartesian-product/</url>
    
    <content type="html"><![CDATA[<p>如果表1有m行a列，表2有n行b列，<strong>两表无条件连接时会将两表里所有行两两组合到一起</strong>，<br>所形成的表就有m*n行，a+b列。如果表1或表2的记录数很多时，连接后会形成一张非常大的表，<br>在这种大表里查询效率特别低，所以在数据库查询时，应尽量避免笛卡尔积的出现。</p><p>首先问个问题，常见的左连接查询，是不是笛卡尔积。<br>换个方式问，左连接中以左表为准，左表有m条记录，连接后的结果集是不是一定能得到m条记录？<br>答案是不一定，也就是说，左连接查询可能会产生笛卡尔积。</p><p>先附上结论：<br>连接查询时，当连接on条件是非唯一字段时，会出现笛卡尔积(局部笛卡尔积)；<br>当连接on条件是唯一字段时，则不会出现笛卡尔积。</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Based by github and hexo to build the test blog</title>
    <link href="/2023/09/23/my-blog-build-remark/"/>
    <url>/2023/09/23/my-blog-build-remark/</url>
    
    <content type="html"><![CDATA[<img src="/2023/09/23/my-blog-build-remark/order_crossover.png" class="" title="the pif for test">]]></content>
    
    
    <categories>
      
      <category>tutorial for blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/23/hello-world/"/>
    <url>/2023/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
